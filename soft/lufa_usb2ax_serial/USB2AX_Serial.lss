
USB2AX_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000ed6  00000f6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000125  0080011e  0080011e  00000f88  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001d76  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005f0  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009a77  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002780  00000000  00000000  0000be0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000fce7  00000000  00000000  0000e58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ee0  00000000  00000000  0001e274  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00015b87  00000000  00000000  0001f154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006411  00000000  00000000  00034cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007a8  00000000  00000000  0003b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00008c59  00000000  00000000  0003b894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
   6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
   8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
   a:	00 00       	nop
   c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   e:	00 00       	nop
  10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
  12:	00 00       	nop
  14:	8d c0       	rjmp	.+282    	; 0x130 <__bad_interrupt>
  16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
  18:	8b c0       	rjmp	.+278    	; 0x130 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	89 c0       	rjmp	.+274    	; 0x130 <__bad_interrupt>
  1e:	00 00       	nop
  20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
  22:	00 00       	nop
  24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
  26:	00 00       	nop
  28:	83 c0       	rjmp	.+262    	; 0x130 <__bad_interrupt>
}
  2a:	00 00       	nop
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
  2c:	08 c3       	rjmp	.+1552   	; 0x63e <__vector_11>
  2e:	00 00       	nop
  30:	aa c3       	rjmp	.+1876   	; 0x786 <__vector_12>
  32:	00 00       	nop
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
  34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
  36:	00 00       	nop
			{
				*CurrConfigLoc = PrevDescLoc;
  38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
  3a:	00 00       	nop
				*BytesRem      = PrevBytesRem;
  3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
  3e:	00 00       	nop
  40:	77 c0       	rjmp	.+238    	; 0x130 <__bad_interrupt>
  42:	00 00       	nop
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
  44:	75 c0       	rjmp	.+234    	; 0x130 <__bad_interrupt>
  46:	00 00       	nop
  48:	73 c0       	rjmp	.+230    	; 0x130 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
  4e:	00 00       	nop

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
  50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
}
  52:	00 00       	nop
  54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
  56:	00 00       	nop
  58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6f c1       	rjmp	.+734    	; 0x33c <__vector_23>
  5e:	00 00       	nop
  60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
  62:	00 00       	nop
  64:	65 c0       	rjmp	.+202    	; 0x130 <__bad_interrupt>
  66:	00 00       	nop
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  68:	63 c0       	rjmp	.+198    	; 0x130 <__bad_interrupt>
  6a:	00 00       	nop
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	1c 03 55 00 53 00 42 00 32 00 41 00 58 00 20 00     ..U.S.B.2.A.X. .
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
  84:	53 00 65 00 72 00 69 00 61 00 6c 00 00 00           S.e.r.i.a.l...

00000092 <ManufacturerString>:
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
  92:	12 03 58 00 65 00 76 00 65 00 6c 00 61 00 62 00     ..X.e.v.e.l.a.b.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a2:	73 00 00 00                                         s...

000000a6 <LanguageString>:
  a6:	04 03 09 04                                         ....

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <DeviceDescriptor>:
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
  e8:	12 01 10 01 02 00 00 08 d0 16 a7 06 00 00 01 02     ................

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f8:	dc 01                                               ..

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d4 e0       	ldi	r29, 0x04	; 4
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
 106:	11 e0       	ldi	r17, 0x01	; 1
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b1 e0       	ldi	r27, 0x01	; 1
 10c:	e6 ed       	ldi	r30, 0xD6	; 214
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
 10e:	fe e0       	ldi	r31, 0x0E	; 14
 110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
 112:	05 90       	lpm	r0, Z+
 114:	0d 92       	st	X+, r0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 116:	ae 31       	cpi	r26, 0x1E	; 30
 118:	b1 07       	cpc	r27, r17
 11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
 11c:	22 e0       	ldi	r18, 0x02	; 2
 11e:	ae e1       	ldi	r26, 0x1E	; 30
 120:	b1 e0       	ldi	r27, 0x01	; 1
 122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
 124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
 126:	a3 34       	cpi	r26, 0x43	; 67
 128:	b2 07       	cpc	r27, r18
 12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
 12c:	99 d0       	rcall	.+306    	; 0x260 <main>
 12e:	d1 c6       	rjmp	.+3490   	; 0xed2 <_exit>

00000130 <__bad_interrupt>:
 130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <LEDs_SetAllLEDs>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 132:	9b b1       	in	r25, 0x0b	; 11
 134:	9f 79       	andi	r25, 0x9F	; 159
 136:	98 2b       	or	r25, r24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 138:	9b b9       	out	0x0b, r25	; 11
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 13a:	08 95       	ret

0000013c <RingBuffer_Insert>:
 13c:	fc 01       	movw	r30, r24
 13e:	a0 81       	ld	r26, Z
 140:	b1 81       	ldd	r27, Z+1	; 0x01
 142:	6c 93       	st	X, r22
 144:	80 81       	ld	r24, Z
 146:	91 81       	ldd	r25, Z+1	; 0x01
 148:	01 96       	adiw	r24, 0x01	; 1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 14a:	91 83       	std	Z+1, r25	; 0x01
 14c:	80 83       	st	Z, r24
 14e:	26 81       	ldd	r18, Z+6	; 0x06
 150:	37 81       	ldd	r19, Z+7	; 0x07
 152:	82 17       	cp	r24, r18
 154:	93 07       	cpc	r25, r19
 156:	21 f4       	brne	.+8      	; 0x160 <RingBuffer_Insert+0x24>
 158:	84 81       	ldd	r24, Z+4	; 0x04
 15a:	95 81       	ldd	r25, Z+5	; 0x05
 15c:	91 83       	std	Z+1, r25	; 0x01
 15e:	80 83       	st	Z, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 160:	2f b7       	in	r18, 0x3f	; 63
 162:	f8 94       	cli
 164:	82 85       	ldd	r24, Z+10	; 0x0a
 166:	93 85       	ldd	r25, Z+11	; 0x0b
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	93 87       	std	Z+11, r25	; 0x0b
 16c:	82 87       	std	Z+10, r24	; 0x0a
 16e:	2f bf       	out	0x3f, r18	; 63
 170:	08 95       	ret

00000172 <RingBuffer_Remove>:
 172:	fc 01       	movw	r30, r24
				ReportData     += 4;
 174:	a2 81       	ldd	r26, Z+2	; 0x02
 176:	b3 81       	ldd	r27, Z+3	; 0x03
 178:	8d 91       	ld	r24, X+
				break;
 17a:	b3 83       	std	Z+3, r27	; 0x03
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 17c:	a2 83       	std	Z+2, r26	; 0x02
 17e:	26 81       	ldd	r18, Z+6	; 0x06
 180:	37 81       	ldd	r19, Z+7	; 0x07
 182:	a2 17       	cp	r26, r18
 184:	b3 07       	cpc	r27, r19
 186:	21 f4       	brne	.+8      	; 0x190 <RingBuffer_Remove+0x1e>
 188:	24 81       	ldd	r18, Z+4	; 0x04
 18a:	35 81       	ldd	r19, Z+5	; 0x05
 18c:	33 83       	std	Z+3, r19	; 0x03
 18e:	22 83       	std	Z+2, r18	; 0x02
 190:	9f b7       	in	r25, 0x3f	; 63
 192:	f8 94       	cli
 194:	22 85       	ldd	r18, Z+10	; 0x0a
 196:	33 85       	ldd	r19, Z+11	; 0x0b
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	31 09       	sbc	r19, r1
 19c:	33 87       	std	Z+11, r19	; 0x0b
 19e:	22 87       	std	Z+10, r18	; 0x0a
 1a0:	9f bf       	out	0x3f, r25	; 63
 1a2:	08 95       	ret

000001a4 <cdc_send_byte>:
 1a4:	68 2f       	mov	r22, r24
 1a6:	8b ea       	ldi	r24, 0xAB	; 171
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	c8 df       	rcall	.-112    	; 0x13c <RingBuffer_Insert>
				ReportSize     -= 2;
 1ac:	a8 9a       	sbi	0x15, 0	; 21
 1ae:	08 95       	ret

000001b0 <cdc_send_USB_data>:
 1b0:	cf 93       	push	r28
 1b2:	fc 01       	movw	r30, r24
 1b4:	21 81       	ldd	r18, Z+1	; 0x01
 1b6:	2f 70       	andi	r18, 0x0F	; 15
 1b8:	20 93 e9 00 	sts	0x00E9, r18
 1bc:	20 91 e8 00 	lds	r18, 0x00E8
				ReportData     += 2;
 1c0:	20 ff       	sbrs	r18, 0
 1c2:	2e c0       	rjmp	.+92     	; 0x220 <cdc_send_USB_data+0x70>
 1c4:	3f b7       	in	r19, 0x3f	; 63
				break;
 1c6:	f8 94       	cli
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 1c8:	20 91 b5 01 	lds	r18, 0x01B5
 1cc:	3f bf       	out	0x3f, r19	; 63
 1ce:	22 23       	and	r18, r18
 1d0:	e1 f0       	breq	.+56     	; 0x20a <cdc_send_USB_data+0x5a>
 1d2:	c2 81       	ldd	r28, Z+2	; 0x02
				ReportSize     -= 1;
 1d4:	2c 17       	cp	r18, r28
 1d6:	10 f4       	brcc	.+4      	; 0x1dc <cdc_send_USB_data+0x2c>
 1d8:	a8 9b       	sbis	0x15, 0	; 21
 1da:	22 c0       	rjmp	.+68     	; 0x220 <cdc_send_USB_data+0x70>
 1dc:	a8 9a       	sbi	0x15, 0	; 21
 1de:	2c 17       	cp	r18, r28
 1e0:	40 f4       	brcc	.+16     	; 0x1f2 <cdc_send_USB_data+0x42>
 1e2:	c2 2f       	mov	r28, r18
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <cdc_send_USB_data+0x42>
 1e6:	8b ea       	ldi	r24, 0xAB	; 171
				ReportData     += 1;
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	c3 df       	rcall	.-122    	; 0x172 <RingBuffer_Remove>
 1ec:	80 93 f1 00 	sts	0x00F1, r24
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1f0:	c1 50       	subi	r28, 0x01	; 1
 1f2:	c1 11       	cpse	r28, r1
 1f4:	f8 cf       	rjmp	.-16     	; 0x1e6 <cdc_send_USB_data+0x36>
 1f6:	80 91 e8 00 	lds	r24, 0x00E8
 1fa:	85 fb       	bst	r24, 5
 1fc:	88 27       	eor	r24, r24
 1fe:	80 f9       	bld	r24, 0
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	89 27       	eor	r24, r25
 204:	80 93 1e 01 	sts	0x011E, r24
 208:	06 c0       	rjmp	.+12     	; 0x216 <cdc_send_USB_data+0x66>
 20a:	80 91 1e 01 	lds	r24, 0x011E
 20e:	88 23       	and	r24, r24
 210:	39 f0       	breq	.+14     	; 0x220 <cdc_send_USB_data+0x70>
 212:	10 92 1e 01 	sts	0x011E, r1
 216:	80 91 e8 00 	lds	r24, 0x00E8
 21a:	8e 77       	andi	r24, 0x7E	; 126
 21c:	80 93 e8 00 	sts	0x00E8, r24
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <SetupHardware>:
 224:	84 b7       	in	r24, 0x34	; 52
 226:	87 7f       	andi	r24, 0xF7	; 247
 228:	84 bf       	out	0x34, r24	; 52
 22a:	88 e1       	ldi	r24, 0x18	; 24
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	80 93 60 00 	sts	0x0060, r24
 234:	10 92 60 00 	sts	0x0060, r1
 238:	0f be       	out	0x3f, r0	; 63
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	80 e8       	ldi	r24, 0x80	; 128
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	80 93 61 00 	sts	0x0061, r24
 246:	90 93 61 00 	sts	0x0061, r25
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	8a b1       	in	r24, 0x0a	; 10
 24e:	80 66       	ori	r24, 0x60	; 96
 250:	8a b9       	out	0x0a, r24	; 10
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	8f 79       	andi	r24, 0x9F	; 159
 256:	8b b9       	out	0x0b, r24	; 11
 258:	e3 d1       	rcall	.+966    	; 0x620 <USB_Init>
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	85 bd       	out	0x25, r24	; 37
 25e:	08 95       	ret

00000260 <main>:
 260:	e1 df       	rcall	.-62     	; 0x224 <SetupHardware>
 262:	ef e1       	ldi	r30, 0x1F	; 31
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	4f b7       	in	r20, 0x3f	; 63
 268:	f8 94       	cli
 26a:	8b e2       	ldi	r24, 0x2B	; 43
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	91 83       	std	Z+1, r25	; 0x01
 270:	80 83       	st	Z, r24
 272:	93 83       	std	Z+3, r25	; 0x03
 274:	82 83       	std	Z+2, r24	; 0x02
 276:	95 83       	std	Z+5, r25	; 0x05
 278:	84 83       	std	Z+4, r24	; 0x04
 27a:	8b ea       	ldi	r24, 0xAB	; 171
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	97 83       	std	Z+7, r25	; 0x07
 280:	86 83       	std	Z+6, r24	; 0x06
 282:	20 e8       	ldi	r18, 0x80	; 128
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	31 87       	std	Z+9, r19	; 0x09
 288:	20 87       	std	Z+8, r18	; 0x08
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 28a:	13 86       	std	Z+11, r1	; 0x0b
 28c:	12 86       	std	Z+10, r1	; 0x0a
 28e:	4f bf       	out	0x3f, r20	; 63
 290:	eb ea       	ldi	r30, 0xAB	; 171
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	4f b7       	in	r20, 0x3f	; 63
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 296:	f8 94       	cli
 298:	87 eb       	ldi	r24, 0xB7	; 183
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	80 83       	st	Z, r24
 2a0:	93 83       	std	Z+3, r25	; 0x03
 2a2:	82 83       	std	Z+2, r24	; 0x02
 2a4:	95 83       	std	Z+5, r25	; 0x05
 2a6:	84 83       	std	Z+4, r24	; 0x04
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 2a8:	87 e3       	ldi	r24, 0x37	; 55
				break;
 2aa:	92 e0       	ldi	r25, 0x02	; 2
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 2ac:	97 83       	std	Z+7, r25	; 0x07
 2ae:	86 83       	std	Z+6, r24	; 0x06
 2b0:	31 87       	std	Z+9, r19	; 0x09
 2b2:	20 87       	std	Z+8, r18	; 0x08
 2b4:	13 86       	std	Z+11, r1	; 0x0b
 2b6:	12 86       	std	Z+10, r1	; 0x0a
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 2b8:	4f bf       	out	0x3f, r20	; 63
 2ba:	80 e0       	ldi	r24, 0x00	; 0
				break;
 2bc:	3a df       	rcall	.-396    	; 0x132 <LEDs_SetAllLEDs>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 2be:	78 94       	sei
 2c0:	8f b7       	in	r24, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	20 91 29 01 	lds	r18, 0x0129
				break;
 2c8:	30 91 2a 01 	lds	r19, 0x012A
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 2cc:	8f bf       	out	0x3f, r24	; 63
 2ce:	80 91 27 01 	lds	r24, 0x0127
 2d2:	90 91 28 01 	lds	r25, 0x0128
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 2d6:	28 17       	cp	r18, r24
 2d8:	39 07       	cpc	r19, r25
 2da:	49 f0       	breq	.+18     	; 0x2ee <main+0x8e>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	f9 d4       	rcall	.+2546   	; 0xcd4 <CDC_Device_ReceiveByte>
 2e2:	97 fd       	sbrc	r25, 7
				break;
 2e4:	04 c0       	rjmp	.+8      	; 0x2ee <main+0x8e>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2e6:	68 2f       	mov	r22, r24
 2e8:	8f e1       	ldi	r24, 0x1F	; 31
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	27 df       	rcall	.-434    	; 0x13c <RingBuffer_Insert>
 2ee:	2f b7       	in	r18, 0x3f	; 63
				break;
 2f0:	f8 94       	cli
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2f2:	80 91 29 01 	lds	r24, 0x0129
 2f6:	90 91 2a 01 	lds	r25, 0x012A
 2fa:	2f bf       	out	0x3f, r18	; 63
 2fc:	89 2b       	or	r24, r25
 2fe:	49 f0       	breq	.+18     	; 0x312 <main+0xb2>
				break;
 300:	8f e1       	ldi	r24, 0x1F	; 31
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	36 df       	rcall	.-404    	; 0x172 <RingBuffer_Remove>
				break;
 306:	90 91 c8 00 	lds	r25, 0x00C8
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 30a:	95 ff       	sbrs	r25, 5
 30c:	fc cf       	rjmp	.-8      	; 0x306 <main+0xa6>
 30e:	80 93 ce 00 	sts	0x00CE, r24
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	91 e0       	ldi	r25, 0x01	; 1
				break;
 316:	4c df       	rcall	.-360    	; 0x1b0 <cdc_send_USB_data>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 318:	9d d4       	rcall	.+2362   	; 0xc54 <USB_USBTask>
 31a:	d2 cf       	rjmp	.-92     	; 0x2c0 <main+0x60>

0000031c <EVENT_USB_Device_Connect>:
				break;
 31c:	80 e4       	ldi	r24, 0x40	; 64
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 31e:	09 cf       	rjmp	.-494    	; 0x132 <LEDs_SetAllLEDs>

00000320 <EVENT_USB_Device_Disconnect>:
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	07 cf       	rjmp	.-498    	; 0x132 <LEDs_SetAllLEDs>

00000324 <EVENT_USB_Device_ConfigurationChanged>:
				break;
 324:	80 e0       	ldi	r24, 0x00	; 0
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	b0 d4       	rcall	.+2400   	; 0xc8a <CDC_Device_ConfigureEndpoints>
 32a:	88 23       	and	r24, r24

				if (ParserData->UsingReportIDs)
 32c:	11 f0       	breq	.+4      	; 0x332 <EVENT_USB_Device_ConfigurationChanged+0xe>
 32e:	80 e2       	ldi	r24, 0x20	; 32
 330:	01 c0       	rjmp	.+2      	; 0x334 <EVENT_USB_Device_ConfigurationChanged+0x10>
 332:	80 e6       	ldi	r24, 0x60	; 96
 334:	fe ce       	rjmp	.-516    	; 0x132 <LEDs_SetAllLEDs>

00000336 <EVENT_USB_Device_ControlRequest>:
 336:	80 e0       	ldi	r24, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	f9 c4       	rjmp	.+2546   	; 0xd2e <CDC_Device_ProcessControlRequest>

0000033c <__vector_23>:
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	2f 93       	push	r18
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 348:	3f 93       	push	r19

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 35e:	80 91 ce 00 	lds	r24, 0x00CE
 362:	9e b3       	in	r25, 0x1e	; 30
 364:	94 30       	cpi	r25, 0x04	; 4
 366:	09 f4       	brne	.+2      	; 0x36a <__vector_23+0x2e>
 368:	1d df       	rcall	.-454    	; 0x1a4 <cdc_send_byte>
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <EVENT_CDC_Device_LineEncodingChanged>:
 38c:	cf 93       	push	r28
 38e:	fc 01       	movw	r30, r24
 390:	a1 8d       	ldd	r26, Z+25	; 0x19
 392:	a1 50       	subi	r26, 0x01	; 1
 394:	a2 30       	cpi	r26, 0x02	; 2
 396:	28 f4       	brcc	.+10     	; 0x3a2 <EVENT_CDC_Device_LineEncodingChanged+0x16>
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	a5 5e       	subi	r26, 0xE5	; 229
 39c:	be 4f       	sbci	r27, 0xFE	; 254
 39e:	cc 91       	ld	r28, X
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <EVENT_CDC_Device_LineEncodingChanged+0x18>
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 3a4:	80 8d       	ldd	r24, Z+24	; 0x18
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	09 f4       	brne	.+2      	; 0x3ac <EVENT_CDC_Device_LineEncodingChanged+0x20>
 3aa:	c8 60       	ori	r28, 0x08	; 8
 3ac:	82 8d       	ldd	r24, Z+26	; 0x1a
 3ae:	87 30       	cpi	r24, 0x07	; 7
 3b0:	31 f0       	breq	.+12     	; 0x3be <EVENT_CDC_Device_LineEncodingChanged+0x32>
 3b2:	88 30       	cpi	r24, 0x08	; 8
					}
				}

				ParserData->UsingReportIDs = true;
 3b4:	31 f0       	breq	.+12     	; 0x3c2 <EVENT_CDC_Device_LineEncodingChanged+0x36>
 3b6:	86 30       	cpi	r24, 0x06	; 6
 3b8:	29 f4       	brne	.+10     	; 0x3c4 <EVENT_CDC_Device_LineEncodingChanged+0x38>
 3ba:	c2 60       	ori	r28, 0x02	; 2
 3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <EVENT_CDC_Device_LineEncodingChanged+0x38>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 3be:	c4 60       	ori	r28, 0x04	; 4
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <EVENT_CDC_Device_LineEncodingChanged+0x38>
 3c2:	c6 60       	ori	r28, 0x06	; 6
 3c4:	10 92 c9 00 	sts	0x00C9, r1
 3c8:	10 92 c8 00 	sts	0x00C8, r1
				break;
 3cc:	10 92 ca 00 	sts	0x00CA, r1
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 3d0:	24 89       	ldd	r18, Z+20	; 0x14
 3d2:	35 89       	ldd	r19, Z+21	; 0x15
 3d4:	46 89       	ldd	r20, Z+22	; 0x16
 3d6:	57 89       	ldd	r21, Z+23	; 0x17
 3d8:	ca 01       	movw	r24, r20
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 3da:	b9 01       	movw	r22, r18
 3dc:	96 95       	lsr	r25
 3de:	87 95       	ror	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	60 58       	subi	r22, 0x80	; 128
 3e6:	7b 47       	sbci	r23, 0x7B	; 123
 3e8:	81 4e       	sbci	r24, 0xE1	; 225
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	50 d5       	rcall	.+2720   	; 0xe8e <__udivmodsi4>
 3ee:	21 50       	subi	r18, 0x01	; 1
 3f0:	31 09       	sbc	r19, r1
 3f2:	30 93 cd 00 	sts	0x00CD, r19
 3f6:	20 93 cc 00 	sts	0x00CC, r18
				break;
 3fa:	c0 93 ca 00 	sts	0x00CA, r28
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	80 93 c8 00 	sts	0x00C8, r24
 404:	88 e9       	ldi	r24, 0x98	; 152
 406:	80 93 c9 00 	sts	0x00C9, r24
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <CALLBACK_USB_GetDescriptor>:
 40e:	29 2f       	mov	r18, r25
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 410:	33 27       	eor	r19, r19
 412:	22 30       	cpi	r18, 0x02	; 2
 414:	31 05       	cpc	r19, r1
 416:	39 f0       	breq	.+14     	; 0x426 <CALLBACK_USB_GetDescriptor+0x18>
 418:	23 30       	cpi	r18, 0x03	; 3
 41a:	31 05       	cpc	r19, r1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 41c:	49 f0       	breq	.+18     	; 0x430 <CALLBACK_USB_GetDescriptor+0x22>
 41e:	21 30       	cpi	r18, 0x01	; 1
 420:	31 05       	cpc	r19, r1
 422:	21 f1       	breq	.+72     	; 0x46c <CALLBACK_USB_GetDescriptor+0x5e>
 424:	28 c0       	rjmp	.+80     	; 0x476 <CALLBACK_USB_GetDescriptor+0x68>
 426:	ee e3       	ldi	r30, 0x3E	; 62

					while (CurrCollectionPath->Parent != NULL)
 428:	f0 e0       	ldi	r31, 0x00	; 0
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 42a:	8a ea       	ldi	r24, 0xAA	; 170
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	27 c0       	rjmp	.+78     	; 0x47e <CALLBACK_USB_GetDescriptor+0x70>
 430:	99 27       	eor	r25, r25
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	91 05       	cpc	r25, r1
 436:	61 f0       	breq	.+24     	; 0x450 <CALLBACK_USB_GetDescriptor+0x42>
 438:	82 30       	cpi	r24, 0x02	; 2
 43a:	91 05       	cpc	r25, r1
 43c:	81 f0       	breq	.+32     	; 0x45e <CALLBACK_USB_GetDescriptor+0x50>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 43e:	89 2b       	or	r24, r25
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
 440:	d1 f4       	brne	.+52     	; 0x476 <CALLBACK_USB_GetDescriptor+0x68>
 442:	e6 ea       	ldi	r30, 0xA6	; 166
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	e4 91       	lpm	r30, Z
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	86 ea       	ldi	r24, 0xA6	; 166
 44c:	90 e0       	ldi	r25, 0x00	; 0
				}

				CurrCollectionPath->Type       = ReportItemData;
 44e:	17 c0       	rjmp	.+46     	; 0x47e <CALLBACK_USB_GetDescriptor+0x70>
 450:	e2 e9       	ldi	r30, 0x92	; 146
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	e4 91       	lpm	r30, Z
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	82 e9       	ldi	r24, 0x92	; 146
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	10 c0       	rjmp	.+32     	; 0x47e <CALLBACK_USB_GetDescriptor+0x70>
 45e:	e4 e7       	ldi	r30, 0x74	; 116

				if (UsageListSize)
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	e4 91       	lpm	r30, Z
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	84 e7       	ldi	r24, 0x74	; 116
 468:	90 e0       	ldi	r25, 0x00	; 0
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 46a:	09 c0       	rjmp	.+18     	; 0x47e <CALLBACK_USB_GetDescriptor+0x70>
 46c:	e2 e1       	ldi	r30, 0x12	; 18
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	88 ee       	ldi	r24, 0xE8	; 232
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	04 c0       	rjmp	.+8      	; 0x47e <CALLBACK_USB_GetDescriptor+0x70>
 476:	e0 e0       	ldi	r30, 0x00	; 0
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	da 01       	movw	r26, r20

					for (uint8_t i = 0; i < UsageListSize; i++)
 480:	8d 93       	st	X+, r24
					  UsageList[i] = UsageList[i + 1];
 482:	9c 93       	st	X, r25
 484:	cf 01       	movw	r24, r30
 486:	08 95       	ret

00000488 <Endpoint_ConfigureEndpoint_Prv>:
 488:	98 2f       	mov	r25, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
 48a:	2c c0       	rjmp	.+88     	; 0x4e4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 48c:	90 93 e9 00 	sts	0x00E9, r25
 490:	98 17       	cp	r25, r24
 492:	39 f0       	breq	.+14     	; 0x4a2 <Endpoint_ConfigureEndpoint_Prv+0x1a>
 494:	70 91 ec 00 	lds	r23, 0x00EC
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
 498:	20 91 ed 00 	lds	r18, 0x00ED
 49c:	50 91 f0 00 	lds	r21, 0x00F0
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <Endpoint_ConfigureEndpoint_Prv+0x20>
 4a2:	24 2f       	mov	r18, r20
 4a4:	76 2f       	mov	r23, r22
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	21 fd       	sbrc	r18, 1
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <Endpoint_ConfigureEndpoint_Prv+0x28>
 4ac:	9f 5f       	subi	r25, 0xFF	; 255
 4ae:	1a c0       	rjmp	.+52     	; 0x4e4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 4b0:	30 91 eb 00 	lds	r19, 0x00EB
 4b4:	3e 7f       	andi	r19, 0xFE	; 254
 4b6:	30 93 eb 00 	sts	0x00EB, r19
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 4ba:	30 91 ed 00 	lds	r19, 0x00ED
 4be:	3d 7f       	andi	r19, 0xFD	; 253
 4c0:	30 93 ed 00 	sts	0x00ED, r19
 4c4:	30 91 eb 00 	lds	r19, 0x00EB
 4c8:	31 60       	ori	r19, 0x01	; 1
 4ca:	30 93 eb 00 	sts	0x00EB, r19
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 4ce:	70 93 ec 00 	sts	0x00EC, r23
 4d2:	20 93 ed 00 	sts	0x00ED, r18
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 4d6:	50 93 f0 00 	sts	0x00F0, r21
 4da:	20 91 ee 00 	lds	r18, 0x00EE
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4de:	27 fd       	sbrc	r18, 7
 4e0:	e5 cf       	rjmp	.-54     	; 0x4ac <Endpoint_ConfigureEndpoint_Prv+0x24>
 4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <Endpoint_ConfigureEndpoint_Prv+0x6a>
 4e4:	95 30       	cpi	r25, 0x05	; 5
 4e6:	90 f2       	brcs	.-92     	; 0x48c <Endpoint_ConfigureEndpoint_Prv+0x4>
 4e8:	8f 70       	andi	r24, 0x0F	; 15
 4ea:	80 93 e9 00 	sts	0x00E9, r24
 4ee:	81 e0       	ldi	r24, 0x01	; 1
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 4f0:	08 95       	ret
 4f2:	80 e0       	ldi	r24, 0x00	; 0
					NewReportItem.CollectionPath = CurrCollectionPath;
 4f4:	08 95       	ret

000004f6 <Endpoint_ConfigureEndpointTable>:
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 4fc:	df 93       	push	r29
 4fe:	06 2f       	mov	r16, r22
 500:	ec 01       	movw	r28, r24
 502:	10 e0       	ldi	r17, 0x00	; 0

					if (UsageListSize)
 504:	2e c0       	rjmp	.+92     	; 0x562 <__stack+0x63>
 506:	98 81       	ld	r25, Y
 508:	91 11       	cpse	r25, r1
 50a:	03 c0       	rjmp	.+6      	; 0x512 <__stack+0x13>
 50c:	1f 5f       	subi	r17, 0xFF	; 255
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 50e:	25 96       	adiw	r28, 0x05	; 5
 510:	28 c0       	rjmp	.+80     	; 0x562 <__stack+0x63>
 512:	2c 81       	ldd	r18, Y+4	; 0x04
 514:	e9 81       	ldd	r30, Y+1	; 0x01
 516:	fa 81       	ldd	r31, Y+2	; 0x02
 518:	6b 81       	ldd	r22, Y+3	; 0x03
 51a:	89 2f       	mov	r24, r25
 51c:	8f 70       	andi	r24, 0x0F	; 15
 51e:	85 30       	cpi	r24, 0x05	; 5
 520:	10 f0       	brcs	.+4      	; 0x526 <__stack+0x27>
 522:	80 e0       	ldi	r24, 0x00	; 0

						for (uint8_t i = 0; i < UsageListSize; i++)
 524:	21 c0       	rjmp	.+66     	; 0x568 <__stack+0x69>
						  UsageList[i] = UsageList[i + 1];
 526:	22 30       	cpi	r18, 0x02	; 2
 528:	10 f0       	brcs	.+4      	; 0x52e <__stack+0x2f>
 52a:	56 e0       	ldi	r21, 0x06	; 6
 52c:	01 c0       	rjmp	.+2      	; 0x530 <__stack+0x31>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
 52e:	52 e0       	ldi	r21, 0x02	; 2
 530:	28 e0       	ldi	r18, 0x08	; 8
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	03 c0       	rjmp	.+6      	; 0x53e <__stack+0x3f>
 538:	4f 5f       	subi	r20, 0xFF	; 255
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
 53a:	22 0f       	add	r18, r18
 53c:	33 1f       	adc	r19, r19
 53e:	2e 17       	cp	r18, r30
 540:	3f 07       	cpc	r19, r31
 542:	d0 f3       	brcs	.-12     	; 0x538 <__stack+0x39>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 544:	42 95       	swap	r20
 546:	40 7f       	andi	r20, 0xF0	; 240
 548:	45 2b       	or	r20, r21
 54a:	99 1f       	adc	r25, r25
 54c:	99 27       	eor	r25, r25
 54e:	99 1f       	adc	r25, r25
 550:	62 95       	swap	r22
 552:	66 0f       	add	r22, r22
 554:	66 0f       	add	r22, r22
 556:	60 7c       	andi	r22, 0xC0	; 192
 558:	69 2b       	or	r22, r25
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 55a:	96 df       	rcall	.-212    	; 0x488 <Endpoint_ConfigureEndpoint_Prv>
 55c:	81 11       	cpse	r24, r1
 55e:	d6 cf       	rjmp	.-84     	; 0x50c <__stack+0xd>
 560:	e0 cf       	rjmp	.-64     	; 0x522 <__stack+0x23>
 562:	10 13       	cpse	r17, r16
 564:	d0 cf       	rjmp	.-96     	; 0x506 <__stack+0x7>
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 570:	08 95       	ret

00000572 <Endpoint_ClearStatusStage>:
 572:	80 91 3b 02 	lds	r24, 0x023B
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 576:	87 fd       	sbrc	r24, 7
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 578:	05 c0       	rjmp	.+10     	; 0x584 <Endpoint_ClearStatusStage+0x12>
 57a:	80 91 e8 00 	lds	r24, 0x00E8
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 57e:	80 ff       	sbrs	r24, 0
 580:	0d c0       	rjmp	.+26     	; 0x59c <Endpoint_ClearStatusStage+0x2a>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 582:	10 c0       	rjmp	.+32     	; 0x5a4 <Endpoint_ClearStatusStage+0x32>
 584:	80 91 e8 00 	lds	r24, 0x00E8
 588:	82 fd       	sbrc	r24, 2
 58a:	04 c0       	rjmp	.+8      	; 0x594 <Endpoint_ClearStatusStage+0x22>
 58c:	8e b3       	in	r24, 0x1e	; 30
 58e:	81 11       	cpse	r24, r1
 590:	f9 cf       	rjmp	.-14     	; 0x584 <Endpoint_ClearStatusStage+0x12>
 592:	08 95       	ret
 594:	80 91 e8 00 	lds	r24, 0x00E8
 598:	8b 77       	andi	r24, 0x7B	; 123
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <Endpoint_ClearStatusStage+0x38>
 59c:	8e b3       	in	r24, 0x1e	; 30

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 59e:	81 11       	cpse	r24, r1
 5a0:	ec cf       	rjmp	.-40     	; 0x57a <Endpoint_ClearStatusStage+0x8>
 5a2:	08 95       	ret
 5a4:	80 91 e8 00 	lds	r24, 0x00E8
 5a8:	8e 77       	andi	r24, 0x7E	; 126
 5aa:	80 93 e8 00 	sts	0x00E8, r24

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5ae:	08 95       	ret

000005b0 <USB_ResetInterface>:
 5b0:	40 d0       	rcall	.+128    	; 0x632 <USB_INT_DisableAllInterrupts>
 5b2:	42 d0       	rcall	.+132    	; 0x638 <USB_INT_ClearAllInterrupts>
 5b4:	80 91 d8 00 	lds	r24, 0x00D8
 5b8:	8f 77       	andi	r24, 0x7F	; 127
 5ba:	80 93 d8 00 	sts	0x00D8, r24
 5be:	80 91 d8 00 	lds	r24, 0x00D8
 5c2:	80 68       	ori	r24, 0x80	; 128
 5c4:	80 93 d8 00 	sts	0x00D8, r24
 5c8:	80 91 d8 00 	lds	r24, 0x00D8
 5cc:	8f 7d       	andi	r24, 0xDF	; 223
 5ce:	80 93 d8 00 	sts	0x00D8, r24
 5d2:	84 e0       	ldi	r24, 0x04	; 4
 5d4:	89 bd       	out	0x29, r24	; 41
 5d6:	86 e0       	ldi	r24, 0x06	; 6
 5d8:	89 bd       	out	0x29, r24	; 41
 5da:	09 b4       	in	r0, 0x29	; 41
 5dc:	00 fe       	sbrs	r0, 0
 5de:	fd cf       	rjmp	.-6      	; 0x5da <USB_ResetInterface+0x2a>
 5e0:	1e ba       	out	0x1e, r1	; 30
 5e2:	10 92 37 02 	sts	0x0237, r1
 5e6:	10 92 39 02 	sts	0x0239, r1
 5ea:	10 92 38 02 	sts	0x0238, r1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5ee:	42 e0       	ldi	r20, 0x02	; 2
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	49 df       	rcall	.-366    	; 0x488 <Endpoint_ConfigureEndpoint_Prv>
					  return HID_PARSE_InsufficientReportItems;
 5f6:	80 91 e1 00 	lds	r24, 0x00E1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 5fa:	8e 7f       	andi	r24, 0xFE	; 254
 5fc:	80 93 e1 00 	sts	0x00E1, r24
 600:	80 91 e2 00 	lds	r24, 0x00E2
 604:	81 60       	ori	r24, 0x01	; 1
 606:	80 93 e2 00 	sts	0x00E2, r24
 60a:	80 91 e2 00 	lds	r24, 0x00E2
 60e:	88 60       	ori	r24, 0x08	; 8
 610:	80 93 e2 00 	sts	0x00E2, r24
 614:	80 91 e0 00 	lds	r24, 0x00E0
 618:	8e 7f       	andi	r24, 0xFE	; 254
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 61a:	80 93 e0 00 	sts	0x00E0, r24
 61e:	08 95       	ret

00000620 <USB_Init>:
 620:	e3 e6       	ldi	r30, 0x63	; 99
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	8e 7f       	andi	r24, 0xFE	; 254
 628:	80 83       	st	Z, r24
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	80 93 3a 02 	sts	0x023A, r24
 630:	bf cf       	rjmp	.-130    	; 0x5b0 <USB_ResetInterface>

00000632 <USB_INT_DisableAllInterrupts>:
 632:	10 92 e2 00 	sts	0x00E2, r1
 636:	08 95       	ret

00000638 <USB_INT_ClearAllInterrupts>:
 638:	10 92 e1 00 	sts	0x00E1, r1
 63c:	08 95       	ret

0000063e <__vector_11>:
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	3f 93       	push	r19
 64c:	4f 93       	push	r20
 64e:	5f 93       	push	r21
 650:	6f 93       	push	r22
 652:	7f 93       	push	r23
 654:	8f 93       	push	r24
 656:	9f 93       	push	r25
 658:	af 93       	push	r26
 65a:	bf 93       	push	r27
 65c:	ef 93       	push	r30
 65e:	ff 93       	push	r31
 660:	80 91 e1 00 	lds	r24, 0x00E1
 664:	82 ff       	sbrs	r24, 2
 666:	0a c0       	rjmp	.+20     	; 0x67c <__vector_11+0x3e>
 668:	80 91 e2 00 	lds	r24, 0x00E2
 66c:	82 ff       	sbrs	r24, 2
 66e:	06 c0       	rjmp	.+12     	; 0x67c <__vector_11+0x3e>
 670:	80 91 e1 00 	lds	r24, 0x00E1
 674:	8b 7f       	andi	r24, 0xFB	; 251
 676:	80 93 e1 00 	sts	0x00E1, r24
					  ParserData->TotalReportItems++;
 67a:	eb d2       	rcall	.+1494   	; 0xc52 <USB_Event_Stub>
 67c:	80 91 e1 00 	lds	r24, 0x00E1
 680:	80 ff       	sbrs	r24, 0
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 682:	16 c0       	rjmp	.+44     	; 0x6b0 <__vector_11+0x72>
 684:	80 91 e2 00 	lds	r24, 0x00E2
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 688:	80 ff       	sbrs	r24, 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 68a:	12 c0       	rjmp	.+36     	; 0x6b0 <__vector_11+0x72>
 68c:	80 91 e2 00 	lds	r24, 0x00E2
 690:	8e 7f       	andi	r24, 0xFE	; 254
 692:	80 93 e2 00 	sts	0x00E2, r24
 696:	80 91 e2 00 	lds	r24, 0x00E2
 69a:	80 61       	ori	r24, 0x10	; 16
 69c:	80 93 e2 00 	sts	0x00E2, r24
 6a0:	80 91 d8 00 	lds	r24, 0x00D8
 6a4:	80 62       	ori	r24, 0x20	; 32
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 6a6:	80 93 d8 00 	sts	0x00D8, r24
 6aa:	19 bc       	out	0x29, r1	; 41
 6ac:	1e ba       	out	0x1e, r1	; 30
 6ae:	38 de       	rcall	.-912    	; 0x320 <EVENT_USB_Device_Disconnect>
 6b0:	80 91 e1 00 	lds	r24, 0x00E1
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 6b4:	84 ff       	sbrs	r24, 4
 6b6:	2c c0       	rjmp	.+88     	; 0x710 <__vector_11+0xd2>
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 6b8:	80 91 e2 00 	lds	r24, 0x00E2
 6bc:	84 ff       	sbrs	r24, 4
 6be:	28 c0       	rjmp	.+80     	; 0x710 <__vector_11+0xd2>
 6c0:	84 e0       	ldi	r24, 0x04	; 4
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 6c2:	89 bd       	out	0x29, r24	; 41
 6c4:	86 e0       	ldi	r24, 0x06	; 6
 6c6:	89 bd       	out	0x29, r24	; 41
 6c8:	09 b4       	in	r0, 0x29	; 41
 6ca:	00 fe       	sbrs	r0, 0
 6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <__vector_11+0x8a>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6ce:	80 91 d8 00 	lds	r24, 0x00D8
 6d2:	8f 7d       	andi	r24, 0xDF	; 223
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6d4:	80 93 d8 00 	sts	0x00D8, r24
 6d8:	80 91 e1 00 	lds	r24, 0x00E1
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
 6dc:	8f 7e       	andi	r24, 0xEF	; 239
 6de:	80 93 e1 00 	sts	0x00E1, r24
 6e2:	80 91 e2 00 	lds	r24, 0x00E2
 6e6:	8f 7e       	andi	r24, 0xEF	; 239
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
 6e8:	80 93 e2 00 	sts	0x00E2, r24
 6ec:	80 91 e2 00 	lds	r24, 0x00E2
	  return HID_PARSE_NoUnfilteredReportItems;
 6f0:	81 60       	ori	r24, 0x01	; 1
 6f2:	80 93 e2 00 	sts	0x00E2, r24

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6f6:	80 91 37 02 	lds	r24, 0x0237

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6fa:	81 11       	cpse	r24, r1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <__vector_11+0xc8>
 6fe:	80 91 e3 00 	lds	r24, 0x00E3
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 702:	87 ff       	sbrs	r24, 7
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 704:	02 c0       	rjmp	.+4      	; 0x70a <__vector_11+0xcc>
 706:	84 e0       	ldi	r24, 0x04	; 4
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 708:	01 c0       	rjmp	.+2      	; 0x70c <__vector_11+0xce>
 70a:	81 e0       	ldi	r24, 0x01	; 1
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 70c:	8e bb       	out	0x1e, r24	; 30
 70e:	06 de       	rcall	.-1012   	; 0x31c <EVENT_USB_Device_Connect>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 710:	80 91 e1 00 	lds	r24, 0x00E1
 714:	83 ff       	sbrs	r24, 3
 716:	26 c0       	rjmp	.+76     	; 0x764 <__vector_11+0x126>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 718:	80 91 e2 00 	lds	r24, 0x00E2
 71c:	83 ff       	sbrs	r24, 3
 71e:	22 c0       	rjmp	.+68     	; 0x764 <__vector_11+0x126>
 720:	80 91 e1 00 	lds	r24, 0x00E1
 724:	87 7f       	andi	r24, 0xF7	; 247
 726:	80 93 e1 00 	sts	0x00E1, r24
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	8e bb       	out	0x1e, r24	; 30
 72e:	10 92 37 02 	sts	0x0237, r1
 732:	80 91 e1 00 	lds	r24, 0x00E1
 736:	8e 7f       	andi	r24, 0xFE	; 254
 738:	80 93 e1 00 	sts	0x00E1, r24
 73c:	80 91 e2 00 	lds	r24, 0x00E2
 740:	8e 7f       	andi	r24, 0xFE	; 254
 742:	80 93 e2 00 	sts	0x00E2, r24
 746:	80 91 e2 00 	lds	r24, 0x00E2
 74a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 74c:	80 93 e2 00 	sts	0x00E2, r24
 750:	42 e0       	ldi	r20, 0x02	; 2
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
 756:	98 de       	rcall	.-720    	; 0x488 <Endpoint_ConfigureEndpoint_Prv>
 758:	80 91 f0 00 	lds	r24, 0x00F0
 75c:	88 60       	ori	r24, 0x08	; 8
 75e:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 762:	77 d2       	rcall	.+1262   	; 0xc52 <USB_Event_Stub>
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <__vector_12>:
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 790:	2f 93       	push	r18
 792:	3f 93       	push	r19
 794:	4f 93       	push	r20
 796:	5f 93       	push	r21
 798:	6f 93       	push	r22
 79a:	7f 93       	push	r23
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
 7a0:	af 93       	push	r26
 7a2:	bf 93       	push	r27
 7a4:	cf 93       	push	r28
 7a6:	ef 93       	push	r30
 7a8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 7aa:	80 91 e9 00 	lds	r24, 0x00E9
 7ae:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 7b0:	90 91 ec 00 	lds	r25, 0x00EC
 7b4:	90 ff       	sbrs	r25, 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <__vector_12+0x36>
 7b8:	90 e8       	ldi	r25, 0x80	; 128
 7ba:	01 c0       	rjmp	.+2      	; 0x7be <__vector_12+0x38>
 7bc:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 7be:	c9 2f       	mov	r28, r25
 7c0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7c2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 7c6:	80 91 f0 00 	lds	r24, 0x00F0
 7ca:	87 7f       	andi	r24, 0xF7	; 247
 7cc:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 7d0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 7d2:	d9 d0       	rcall	.+434    	; 0x986 <USB_Device_ProcessControlRequest>
 7d4:	10 92 e9 00 	sts	0x00E9, r1
 7d8:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 7dc:	88 60       	ori	r24, 0x08	; 8
 7de:	80 93 f0 00 	sts	0x00F0, r24
 7e2:	cf 70       	andi	r28, 0x0F	; 15
 7e4:	c0 93 e9 00 	sts	0x00E9, r28
 7e8:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 7ea:	ef 91       	pop	r30
 7ec:	cf 91       	pop	r28
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 80c:	20 91 41 02 	lds	r18, 0x0241
 810:	30 91 42 02 	lds	r19, 0x0242
 814:	26 17       	cp	r18, r22
 816:	37 07       	cpc	r19, r23
 818:	48 f0       	brcs	.+18     	; 0x82c <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 81a:	61 15       	cp	r22, r1
 81c:	71 05       	cpc	r23, r1
 81e:	39 f4       	brne	.+14     	; 0x82e <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 820:	20 91 e8 00 	lds	r18, 0x00E8
 824:	2e 77       	andi	r18, 0x7E	; 126
 826:	20 93 e8 00 	sts	0x00E8, r18
 82a:	01 c0       	rjmp	.+2      	; 0x82e <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 82c:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 82e:	9c 01       	movw	r18, r24
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	33 c0       	rjmp	.+102    	; 0x89a <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 834:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 836:	99 23       	and	r25, r25
 838:	09 f4       	brne	.+2      	; 0x83c <Endpoint_Write_Control_Stream_LE+0x30>
 83a:	42 c0       	rjmp	.+132    	; 0x8c0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 83c:	95 30       	cpi	r25, 0x05	; 5
 83e:	09 f4       	brne	.+2      	; 0x842 <Endpoint_Write_Control_Stream_LE+0x36>
 840:	41 c0       	rjmp	.+130    	; 0x8c4 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 842:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 846:	93 fd       	sbrc	r25, 3
 848:	39 c0       	rjmp	.+114    	; 0x8bc <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 84a:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 84e:	92 fd       	sbrc	r25, 2
 850:	2f c0       	rjmp	.+94     	; 0x8b0 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 852:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 856:	90 ff       	sbrs	r25, 0
 858:	20 c0       	rjmp	.+64     	; 0x89a <Endpoint_Write_Control_Stream_LE+0x8e>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 85a:	80 91 f2 00 	lds	r24, 0x00F2
 85e:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 860:	f9 01       	movw	r30, r18
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
 862:	82 1b       	sub	r24, r18
 864:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 866:	05 c0       	rjmp	.+10     	; 0x872 <Endpoint_Write_Control_Stream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 868:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 86a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 86e:	61 50       	subi	r22, 0x01	; 1
 870:	71 09       	sbc	r23, r1
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
 872:	9f 01       	movw	r18, r30
 874:	28 0f       	add	r18, r24
 876:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 878:	61 15       	cp	r22, r1
 87a:	71 05       	cpc	r23, r1
 87c:	19 f0       	breq	.+6      	; 0x884 <Endpoint_Write_Control_Stream_LE+0x78>
 87e:	28 30       	cpi	r18, 0x08	; 8
 880:	31 05       	cpc	r19, r1
 882:	90 f3       	brcs	.-28     	; 0x868 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	28 30       	cpi	r18, 0x08	; 8
 888:	31 05       	cpc	r19, r1
 88a:	09 f0       	breq	.+2      	; 0x88e <Endpoint_Write_Control_Stream_LE+0x82>
 88c:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 88e:	90 91 e8 00 	lds	r25, 0x00E8
 892:	9e 77       	andi	r25, 0x7E	; 126
 894:	90 93 e8 00 	sts	0x00E8, r25
 898:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 89a:	61 15       	cp	r22, r1
 89c:	71 05       	cpc	r23, r1
 89e:	51 f6       	brne	.-108    	; 0x834 <Endpoint_Write_Control_Stream_LE+0x28>
 8a0:	81 11       	cpse	r24, r1
 8a2:	c8 cf       	rjmp	.-112    	; 0x834 <Endpoint_Write_Control_Stream_LE+0x28>
 8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8a6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8a8:	88 23       	and	r24, r24
 8aa:	51 f0       	breq	.+20     	; 0x8c0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8ac:	85 30       	cpi	r24, 0x05	; 5
 8ae:	51 f0       	breq	.+20     	; 0x8c4 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8b0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 8b4:	82 ff       	sbrs	r24, 2
 8b6:	f7 cf       	rjmp	.-18     	; 0x8a6 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 8c0:	82 e0       	ldi	r24, 0x02	; 2
 8c2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 8c4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 8c6:	08 95       	ret

000008c8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8c8:	20 91 41 02 	lds	r18, 0x0241
 8cc:	30 91 42 02 	lds	r19, 0x0242
 8d0:	26 17       	cp	r18, r22
 8d2:	37 07       	cpc	r19, r23
 8d4:	48 f0       	brcs	.+18     	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8d6:	61 15       	cp	r22, r1
 8d8:	71 05       	cpc	r23, r1
 8da:	39 f4       	brne	.+14     	; 0x8ea <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8dc:	20 91 e8 00 	lds	r18, 0x00E8
 8e0:	2e 77       	andi	r18, 0x7E	; 126
 8e2:	20 93 e8 00 	sts	0x00E8, r18
 8e6:	01 c0       	rjmp	.+2      	; 0x8ea <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8e8:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 8ea:	9c 01       	movw	r18, r24
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	34 c0       	rjmp	.+104    	; 0x958 <Endpoint_Write_Control_PStream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8f0:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8f2:	99 23       	and	r25, r25
 8f4:	09 f4       	brne	.+2      	; 0x8f8 <Endpoint_Write_Control_PStream_LE+0x30>
 8f6:	43 c0       	rjmp	.+134    	; 0x97e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8f8:	95 30       	cpi	r25, 0x05	; 5
 8fa:	09 f4       	brne	.+2      	; 0x8fe <Endpoint_Write_Control_PStream_LE+0x36>
 8fc:	42 c0       	rjmp	.+132    	; 0x982 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8fe:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 902:	93 fd       	sbrc	r25, 3
 904:	3a c0       	rjmp	.+116    	; 0x97a <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 906:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 90a:	92 fd       	sbrc	r25, 2
 90c:	30 c0       	rjmp	.+96     	; 0x96e <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 90e:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 912:	90 ff       	sbrs	r25, 0
 914:	21 c0       	rjmp	.+66     	; 0x958 <Endpoint_Write_Control_PStream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 916:	80 91 f2 00 	lds	r24, 0x00F2
 91a:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 91c:	f9 01       	movw	r30, r18
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
 91e:	82 1b       	sub	r24, r18
 920:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 922:	06 c0       	rjmp	.+12     	; 0x930 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 924:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 926:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 92a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 92c:	61 50       	subi	r22, 0x01	; 1
 92e:	71 09       	sbc	r23, r1
*/

#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
 930:	9c 01       	movw	r18, r24
 932:	2e 0f       	add	r18, r30
 934:	3f 1f       	adc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 936:	61 15       	cp	r22, r1
 938:	71 05       	cpc	r23, r1
 93a:	19 f0       	breq	.+6      	; 0x942 <Endpoint_Write_Control_PStream_LE+0x7a>
 93c:	28 30       	cpi	r18, 0x08	; 8
 93e:	31 05       	cpc	r19, r1
 940:	88 f3       	brcs	.-30     	; 0x924 <Endpoint_Write_Control_PStream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	28 30       	cpi	r18, 0x08	; 8
 946:	31 05       	cpc	r19, r1
 948:	09 f0       	breq	.+2      	; 0x94c <Endpoint_Write_Control_PStream_LE+0x84>
 94a:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 94c:	90 91 e8 00 	lds	r25, 0x00E8
 950:	9e 77       	andi	r25, 0x7E	; 126
 952:	90 93 e8 00 	sts	0x00E8, r25
 956:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 958:	61 15       	cp	r22, r1
 95a:	71 05       	cpc	r23, r1
 95c:	49 f6       	brne	.-110    	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0x28>
 95e:	81 11       	cpse	r24, r1
 960:	c7 cf       	rjmp	.-114    	; 0x8f0 <Endpoint_Write_Control_PStream_LE+0x28>
 962:	05 c0       	rjmp	.+10     	; 0x96e <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 964:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 966:	88 23       	and	r24, r24
 968:	51 f0       	breq	.+20     	; 0x97e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 96a:	85 30       	cpi	r24, 0x05	; 5
 96c:	51 f0       	breq	.+20     	; 0x982 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 96e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 972:	82 ff       	sbrs	r24, 2
 974:	f7 cf       	rjmp	.-18     	; 0x964 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 97e:	82 e0       	ldi	r24, 0x02	; 2
 980:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 982:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 984:	08 95       	ret

00000986 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 986:	ef 92       	push	r14
 988:	ff 92       	push	r15
 98a:	0f 93       	push	r16
 98c:	1f 93       	push	r17
 98e:	cf 93       	push	r28
 990:	df 93       	push	r29
 992:	cd b7       	in	r28, 0x3d	; 61
 994:	de b7       	in	r29, 0x3e	; 62
 996:	ac 97       	sbiw	r28, 0x2c	; 44
 998:	0f b6       	in	r0, 0x3f	; 63
 99a:	f8 94       	cli
 99c:	de bf       	out	0x3e, r29	; 62
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 9a2:	eb e3       	ldi	r30, 0x3B	; 59
 9a4:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9a6:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9aa:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9ac:	22 e0       	ldi	r18, 0x02	; 2
 9ae:	e3 34       	cpi	r30, 0x43	; 67
 9b0:	f2 07       	cpc	r31, r18
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9b4:	c0 dc       	rcall	.-1664   	; 0x336 <EVENT_USB_Device_ControlRequest>
 9b6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ba:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 9bc:	2f c1       	rjmp	.+606    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 9be:	80 91 3b 02 	lds	r24, 0x023B
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9c2:	90 91 3c 02 	lds	r25, 0x023C

		switch (USB_ControlRequest.bRequest)
 9c6:	95 30       	cpi	r25, 0x05	; 5
 9c8:	09 f4       	brne	.+2      	; 0x9cc <USB_Device_ProcessControlRequest+0x46>
 9ca:	87 c0       	rjmp	.+270    	; 0xada <USB_Device_ProcessControlRequest+0x154>
 9cc:	38 f4       	brcc	.+14     	; 0x9dc <USB_Device_ProcessControlRequest+0x56>
 9ce:	91 30       	cpi	r25, 0x01	; 1
 9d0:	b1 f1       	breq	.+108    	; 0xa3e <USB_Device_ProcessControlRequest+0xb8>
 9d2:	70 f0       	brcs	.+28     	; 0x9f0 <USB_Device_ProcessControlRequest+0x6a>
 9d4:	93 30       	cpi	r25, 0x03	; 3
 9d6:	09 f0       	breq	.+2      	; 0x9da <USB_Device_ProcessControlRequest+0x54>
 9d8:	21 c1       	rjmp	.+578    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 9da:	31 c0       	rjmp	.+98     	; 0xa3e <USB_Device_ProcessControlRequest+0xb8>
 9dc:	98 30       	cpi	r25, 0x08	; 8
 9de:	09 f4       	brne	.+2      	; 0x9e2 <USB_Device_ProcessControlRequest+0x5c>
 9e0:	f3 c0       	rjmp	.+486    	; 0xbc8 <USB_Device_ProcessControlRequest+0x242>
 9e2:	99 30       	cpi	r25, 0x09	; 9
 9e4:	09 f4       	brne	.+2      	; 0x9e8 <USB_Device_ProcessControlRequest+0x62>
 9e6:	ff c0       	rjmp	.+510    	; 0xbe6 <USB_Device_ProcessControlRequest+0x260>
 9e8:	96 30       	cpi	r25, 0x06	; 6
 9ea:	09 f0       	breq	.+2      	; 0x9ee <USB_Device_ProcessControlRequest+0x68>
 9ec:	17 c1       	rjmp	.+558    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 9ee:	9b c0       	rjmp	.+310    	; 0xb26 <USB_Device_ProcessControlRequest+0x1a0>
 9f0:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9f2:	21 f0       	breq	.+8      	; 0x9fc <USB_Device_ProcessControlRequest+0x76>
 9f4:	82 38       	cpi	r24, 0x82	; 130
 9f6:	09 f0       	breq	.+2      	; 0x9fa <USB_Device_ProcessControlRequest+0x74>
 9f8:	11 c1       	rjmp	.+546    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 9fa:	08 c0       	rjmp	.+16     	; 0xa0c <USB_Device_ProcessControlRequest+0x86>
 9fc:	80 91 38 02 	lds	r24, 0x0238
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a00:	90 91 39 02 	lds	r25, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a04:	99 23       	and	r25, r25
 a06:	89 f0       	breq	.+34     	; 0xa2a <USB_Device_ProcessControlRequest+0xa4>
 a08:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a0a:	0f c0       	rjmp	.+30     	; 0xa2a <USB_Device_ProcessControlRequest+0xa4>
 a0c:	80 91 3f 02 	lds	r24, 0x023F
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a10:	90 91 40 02 	lds	r25, 0x0240
 a14:	8f 70       	andi	r24, 0x0F	; 15
 a16:	99 27       	eor	r25, r25
 a18:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a1c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a20:	85 fb       	bst	r24, 5
 a22:	88 27       	eor	r24, r24
 a24:	80 f9       	bld	r24, 0
 a26:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a2a:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a2e:	97 7f       	andi	r25, 0xF7	; 247
 a30:	90 93 e8 00 	sts	0x00E8, r25
 a34:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a38:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a3c:	d0 c0       	rjmp	.+416    	; 0xbde <USB_Device_ProcessControlRequest+0x258>
 a3e:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a40:	19 f0       	breq	.+6      	; 0xa48 <USB_Device_ProcessControlRequest+0xc2>
 a42:	82 30       	cpi	r24, 0x02	; 2
 a44:	09 f0       	breq	.+2      	; 0xa48 <USB_Device_ProcessControlRequest+0xc2>
 a46:	ea c0       	rjmp	.+468    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 a48:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a4a:	21 f0       	breq	.+8      	; 0xa54 <USB_Device_ProcessControlRequest+0xce>
 a4c:	82 30       	cpi	r24, 0x02	; 2
 a4e:	09 f0       	breq	.+2      	; 0xa52 <USB_Device_ProcessControlRequest+0xcc>
 a50:	e5 c0       	rjmp	.+458    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 a52:	0b c0       	rjmp	.+22     	; 0xa6a <USB_Device_ProcessControlRequest+0xe4>
 a54:	80 91 3d 02 	lds	r24, 0x023D
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a58:	81 30       	cpi	r24, 0x01	; 1
 a5a:	09 f0       	breq	.+2      	; 0xa5e <USB_Device_ProcessControlRequest+0xd8>
 a5c:	df c0       	rjmp	.+446    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 a5e:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a60:	09 f0       	breq	.+2      	; 0xa64 <USB_Device_ProcessControlRequest+0xde>
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	80 93 39 02 	sts	0x0239, r24
 a68:	2f c0       	rjmp	.+94     	; 0xac8 <USB_Device_ProcessControlRequest+0x142>
 a6a:	80 91 3d 02 	lds	r24, 0x023D

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a6e:	81 11       	cpse	r24, r1
 a70:	2b c0       	rjmp	.+86     	; 0xac8 <USB_Device_ProcessControlRequest+0x142>
 a72:	80 91 3f 02 	lds	r24, 0x023F
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a76:	90 91 40 02 	lds	r25, 0x0240
 a7a:	8f 70       	andi	r24, 0x0F	; 15
 a7c:	99 27       	eor	r25, r25
 a7e:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a80:	09 f4       	brne	.+2      	; 0xa84 <USB_Device_ProcessControlRequest+0xfe>
 a82:	cc c0       	rjmp	.+408    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 a84:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a88:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a8c:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a8e:	1c c0       	rjmp	.+56     	; 0xac8 <USB_Device_ProcessControlRequest+0x142>
 a90:	20 91 3c 02 	lds	r18, 0x023C
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a94:	23 30       	cpi	r18, 0x03	; 3
 a96:	21 f4       	brne	.+8      	; 0xaa0 <USB_Device_ProcessControlRequest+0x11a>
 a98:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a9c:	80 62       	ori	r24, 0x20	; 32
 a9e:	12 c0       	rjmp	.+36     	; 0xac4 <USB_Device_ProcessControlRequest+0x13e>
 aa0:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 aa4:	90 61       	ori	r25, 0x10	; 16
 aa6:	90 93 eb 00 	sts	0x00EB, r25
 aaa:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	01 c0       	rjmp	.+2      	; 0xab2 <USB_Device_ProcessControlRequest+0x12c>
 ab0:	22 0f       	add	r18, r18
 ab2:	8a 95       	dec	r24
 ab4:	ea f7       	brpl	.-6      	; 0xab0 <USB_Device_ProcessControlRequest+0x12a>
 ab6:	20 93 ea 00 	sts	0x00EA, r18
 aba:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 abe:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 ac2:	88 60       	ori	r24, 0x08	; 8
 ac4:	80 93 eb 00 	sts	0x00EB, r24
 ac8:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 acc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ad0:	87 7f       	andi	r24, 0xF7	; 247
 ad2:	80 93 e8 00 	sts	0x00E8, r24
 ad6:	4d dd       	rcall	.-1382   	; 0x572 <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 ad8:	a1 c0       	rjmp	.+322    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 ada:	81 11       	cpse	r24, r1
 adc:	9f c0       	rjmp	.+318    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ade:	00 91 3d 02 	lds	r16, 0x023D
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 ae2:	10 91 3e 02 	lds	r17, 0x023E
 ae6:	0f 77       	andi	r16, 0x7F	; 127
 ae8:	11 27       	eor	r17, r17
 aea:	e0 2e       	mov	r14, r16
 aec:	ff b6       	in	r15, 0x3f	; 63
 aee:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 af0:	80 91 e8 00 	lds	r24, 0x00E8
 af4:	87 7f       	andi	r24, 0xF7	; 247
 af6:	80 93 e8 00 	sts	0x00E8, r24
 afa:	3b dd       	rcall	.-1418   	; 0x572 <Endpoint_ClearStatusStage>
 afc:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b00:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b02:	fc cf       	rjmp	.-8      	; 0xafc <USB_Device_ProcessControlRequest+0x176>
 b04:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
 b08:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b0a:	80 2b       	or	r24, r16
 b0c:	80 93 e3 00 	sts	0x00E3, r24
 b10:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
 b12:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 b16:	ee 20       	and	r14, r14
 b18:	11 f0       	breq	.+4      	; 0xb1e <USB_Device_ProcessControlRequest+0x198>
 b1a:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b1c:	01 c0       	rjmp	.+2      	; 0xb20 <USB_Device_ProcessControlRequest+0x19a>
 b1e:	82 e0       	ldi	r24, 0x02	; 2
 b20:	8e bb       	out	0x1e, r24	; 30
 b22:	ff be       	out	0x3f, r15	; 63
 b24:	7b c0       	rjmp	.+246    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 b26:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b28:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
 b2a:	08 f0       	brcs	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0x1a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b2c:	77 c0       	rjmp	.+238    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 b2e:	80 91 3d 02 	lds	r24, 0x023D
 b32:	90 91 3e 02 	lds	r25, 0x023E
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b36:	8c 3d       	cpi	r24, 0xDC	; 220
 b38:	23 e0       	ldi	r18, 0x03	; 3
 b3a:	92 07       	cpc	r25, r18
 b3c:	71 f5       	brne	.+92     	; 0xb9a <USB_Device_ProcessControlRequest+0x214>
 b3e:	83 e0       	ldi	r24, 0x03	; 3
 b40:	8a 83       	std	Y+2, r24	; 0x02
 b42:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b44:	89 83       	std	Y+1, r24	; 0x01
 b46:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b48:	f8 94       	cli
 b4a:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b4c:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b4e:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
 b50:	3e e0       	ldi	r19, 0x0E	; 14
 b52:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b54:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b56:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b58:	50 93 57 00 	sts	0x0057, r21
 b5c:	e4 91       	lpm	r30, Z
 b5e:	20 ff       	sbrs	r18, 0
 b60:	03 c0       	rjmp	.+6      	; 0xb68 <USB_Device_ProcessControlRequest+0x1e2>
 b62:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
 b64:	ef 70       	andi	r30, 0x0F	; 15
 b66:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
 b68:	ef 70       	andi	r30, 0x0F	; 15
 b6a:	8e 2f       	mov	r24, r30
						SigReadAddress++;
 b6c:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
 b6e:	ea 30       	cpi	r30, 0x0A	; 10
 b70:	10 f0       	brcs	.+4      	; 0xb76 <USB_Device_ProcessControlRequest+0x1f0>
 b72:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b74:	01 c0       	rjmp	.+2      	; 0xb78 <USB_Device_ProcessControlRequest+0x1f2>
 b76:	c0 96       	adiw	r24, 0x30	; 48
 b78:	8d 93       	st	X+, r24
 b7a:	9d 93       	st	X+, r25
 b7c:	2f 5f       	subi	r18, 0xFF	; 255
 b7e:	24 31       	cpi	r18, 0x14	; 20
 b80:	49 f7       	brne	.-46     	; 0xb54 <USB_Device_ProcessControlRequest+0x1ce>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b82:	4f bf       	out	0x3f, r20	; 63
 b84:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b88:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b8a:	80 93 e8 00 	sts	0x00E8, r24
 b8e:	6a e2       	ldi	r22, 0x2A	; 42
 b90:	70 e0       	ldi	r23, 0x00	; 0
 b92:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b94:	01 96       	adiw	r24, 0x01	; 1
 b96:	3a de       	rcall	.-908    	; 0x80c <Endpoint_Write_Control_Stream_LE>
 b98:	11 c0       	rjmp	.+34     	; 0xbbc <USB_Device_ProcessControlRequest+0x236>
 b9a:	ae 01       	movw	r20, r28
 b9c:	45 5d       	subi	r20, 0xD5	; 213
 b9e:	5f 4f       	sbci	r21, 0xFF	; 255
 ba0:	60 91 3f 02 	lds	r22, 0x023F
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ba4:	34 dc       	rcall	.-1944   	; 0x40e <CALLBACK_USB_GetDescriptor>
 ba6:	00 97       	sbiw	r24, 0x00	; 0
 ba8:	c9 f1       	breq	.+114    	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 baa:	20 91 e8 00 	lds	r18, 0x00E8
 bae:	27 7f       	andi	r18, 0xF7	; 247
 bb0:	20 93 e8 00 	sts	0x00E8, r18
 bb4:	bc 01       	movw	r22, r24
 bb6:	8b a5       	ldd	r24, Y+43	; 0x2b
 bb8:	9c a5       	ldd	r25, Y+44	; 0x2c
 bba:	86 de       	rcall	.-756    	; 0x8c8 <Endpoint_Write_Control_PStream_LE>
 bbc:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 bc0:	8b 77       	andi	r24, 0x7B	; 123
 bc2:	80 93 e8 00 	sts	0x00E8, r24
 bc6:	2a c0       	rjmp	.+84     	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bc8:	80 38       	cpi	r24, 0x80	; 128
 bca:	41 f5       	brne	.+80     	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
 bcc:	80 91 e8 00 	lds	r24, 0x00E8
 bd0:	87 7f       	andi	r24, 0xF7	; 247
 bd2:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bd6:	80 91 37 02 	lds	r24, 0x0237
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bda:	80 93 f1 00 	sts	0x00F1, r24
 bde:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 be2:	8e 77       	andi	r24, 0x7E	; 126
 be4:	76 cf       	rjmp	.-276    	; 0xad2 <USB_Device_ProcessControlRequest+0x14c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 be6:	81 11       	cpse	r24, r1
 be8:	19 c0       	rjmp	.+50     	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bea:	90 91 3d 02 	lds	r25, 0x023D
 bee:	92 30       	cpi	r25, 0x02	; 2
 bf0:	a8 f4       	brcc	.+42     	; 0xc1c <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bf2:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 bf6:	87 7f       	andi	r24, 0xF7	; 247
 bf8:	80 93 e8 00 	sts	0x00E8, r24
 bfc:	90 93 37 02 	sts	0x0237, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c00:	b8 dc       	rcall	.-1680   	; 0x572 <Endpoint_ClearStatusStage>
 c02:	80 91 37 02 	lds	r24, 0x0237
 c06:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c08:	04 c0       	rjmp	.+8      	; 0xc12 <USB_Device_ProcessControlRequest+0x28c>
 c0a:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c0e:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c10:	02 c0       	rjmp	.+4      	; 0xc16 <USB_Device_ProcessControlRequest+0x290>
 c12:	84 e0       	ldi	r24, 0x04	; 4
 c14:	01 c0       	rjmp	.+2      	; 0xc18 <USB_Device_ProcessControlRequest+0x292>
 c16:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c18:	8e bb       	out	0x1e, r24	; 30
 c1a:	84 db       	rcall	.-2296   	; 0x324 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c1c:	80 91 e8 00 	lds	r24, 0x00E8
 c20:	83 ff       	sbrs	r24, 3
 c22:	0a c0       	rjmp	.+20     	; 0xc38 <USB_Device_ProcessControlRequest+0x2b2>
 c24:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
 c28:	80 62       	ori	r24, 0x20	; 32
 c2a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c2e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c32:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c34:	80 93 e8 00 	sts	0x00E8, r24
 c38:	ac 96       	adiw	r28, 0x2c	; 44
 c3a:	0f b6       	in	r0, 0x3f	; 63
 c3c:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c3e:	de bf       	out	0x3e, r29	; 62
 c40:	0f be       	out	0x3f, r0	; 63
 c42:	cd bf       	out	0x3d, r28	; 61
 c44:	df 91       	pop	r29
 c46:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 c48:	1f 91       	pop	r17
 c4a:	0f 91       	pop	r16
 c4c:	ff 90       	pop	r15
 c4e:	ef 90       	pop	r14
 c50:	08 95       	ret

00000c52 <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
 c52:	08 95       	ret

00000c54 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c54:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c56:	8e b3       	in	r24, 0x1e	; 30
 c58:	88 23       	and	r24, r24
 c5a:	a9 f0       	breq	.+42     	; 0xc86 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c5c:	80 91 e9 00 	lds	r24, 0x00E9
 c60:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c62:	90 91 ec 00 	lds	r25, 0x00EC
 c66:	90 ff       	sbrs	r25, 0
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <USB_USBTask+0x1a>
 c6a:	90 e8       	ldi	r25, 0x80	; 128
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <USB_USBTask+0x1c>
 c6e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c70:	c9 2f       	mov	r28, r25
 c72:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c74:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c78:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c7c:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 c7e:	83 de       	rcall	.-762    	; 0x986 <USB_Device_ProcessControlRequest>
 c80:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c82:	c0 93 e9 00 	sts	0x00E9, r28
 c86:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
 c88:	08 95       	ret

00000c8a <CDC_Device_ConfigureEndpoints>:
 c8a:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c8c:	df 93       	push	r29
 c8e:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 c90:	40 96       	adiw	r24, 0x10	; 16
 c92:	fc 01       	movw	r30, r24
 c94:	8b e0       	ldi	r24, 0x0B	; 11
 c96:	df 01       	movw	r26, r30
 c98:	1d 92       	st	X+, r1
 c9a:	8a 95       	dec	r24
 c9c:	e9 f7       	brne	.-6      	; 0xc98 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 c9e:	82 e0       	ldi	r24, 0x02	; 2
 ca0:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 ca2:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 ca4:	83 e0       	ldi	r24, 0x03	; 3
 ca6:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 ca8:	61 e0       	ldi	r22, 0x01	; 1
 caa:	ce 01       	movw	r24, r28
 cac:	01 96       	adiw	r24, 0x01	; 1
 cae:	23 dc       	rcall	.-1978   	; 0x4f6 <Endpoint_ConfigureEndpointTable>
 cb0:	88 23       	and	r24, r24
 cb2:	61 f0       	breq	.+24     	; 0xccc <CDC_Device_ConfigureEndpoints+0x42>
 cb4:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 cb6:	ce 01       	movw	r24, r28
 cb8:	06 96       	adiw	r24, 0x06	; 6
 cba:	1d dc       	rcall	.-1990   	; 0x4f6 <Endpoint_ConfigureEndpointTable>
 cbc:	88 23       	and	r24, r24
 cbe:	31 f0       	breq	.+12     	; 0xccc <CDC_Device_ConfigureEndpoints+0x42>
 cc0:	61 e0       	ldi	r22, 0x01	; 1
 cc2:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 cc4:	0b 96       	adiw	r24, 0x0b	; 11
 cc6:	df 91       	pop	r29
 cc8:	cf 91       	pop	r28
	  return false;

	return true;
}
 cca:	15 cc       	rjmp	.-2006   	; 0x4f6 <Endpoint_ConfigureEndpointTable>
 ccc:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28
	  return false;

	return true;
}
 cd2:	08 95       	ret

00000cd4 <CDC_Device_ReceiveByte>:
 cd4:	2e b3       	in	r18, 0x1e	; 30
 cd6:	24 30       	cpi	r18, 0x04	; 4
 cd8:	19 f0       	breq	.+6      	; 0xce0 <CDC_Device_ReceiveByte+0xc>
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
 cda:	2f ef       	ldi	r18, 0xFF	; 255
 cdc:	3f ef       	ldi	r19, 0xFF	; 255
 cde:	24 c0       	rjmp	.+72     	; 0xd28 <CDC_Device_ReceiveByte+0x54>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ce0:	fc 01       	movw	r30, r24
 ce2:	44 89       	ldd	r20, Z+20	; 0x14
 ce4:	55 89       	ldd	r21, Z+21	; 0x15
 ce6:	66 89       	ldd	r22, Z+22	; 0x16
 ce8:	77 89       	ldd	r23, Z+23	; 0x17
 cea:	45 2b       	or	r20, r21
 cec:	46 2b       	or	r20, r22
 cee:	47 2b       	or	r20, r23
 cf0:	a1 f3       	breq	.-24     	; 0xcda <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cf2:	86 81       	ldd	r24, Z+6	; 0x06
 cf4:	8f 70       	andi	r24, 0x0F	; 15
 cf6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 cfa:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 cfe:	82 ff       	sbrs	r24, 2
 d00:	ec cf       	rjmp	.-40     	; 0xcda <CDC_Device_ReceiveByte+0x6>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 d02:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
 d06:	88 23       	and	r24, r24
 d08:	21 f0       	breq	.+8      	; 0xd12 <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 d0a:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 d0e:	30 e0       	ldi	r19, 0x00	; 0
 d10:	02 c0       	rjmp	.+4      	; 0xd16 <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 d12:	2f ef       	ldi	r18, 0xFF	; 255
 d14:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 d16:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 d1a:	81 11       	cpse	r24, r1
 d1c:	05 c0       	rjmp	.+10     	; 0xd28 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d1e:	80 91 e8 00 	lds	r24, 0x00E8
 d22:	8b 77       	andi	r24, 0x7B	; 123
 d24:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 d28:	c9 01       	movw	r24, r18
 d2a:	08 95       	ret

00000d2c <CDC_Device_Event_Stub>:
}
#endif

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{
 d2c:	08 95       	ret

00000d2e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d2e:	cf 93       	push	r28
 d30:	df 93       	push	r29
 d32:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d34:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 d38:	83 ff       	sbrs	r24, 3
 d3a:	a6 c0       	rjmp	.+332    	; 0xe88 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 d3c:	88 81       	ld	r24, Y
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	20 91 3f 02 	lds	r18, 0x023F
 d44:	30 91 40 02 	lds	r19, 0x0240
 d48:	28 17       	cp	r18, r24
 d4a:	39 07       	cpc	r19, r25
 d4c:	09 f0       	breq	.+2      	; 0xd50 <CDC_Device_ProcessControlRequest+0x22>
 d4e:	9c c0       	rjmp	.+312    	; 0xe88 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
 d50:	80 91 3c 02 	lds	r24, 0x023C
 d54:	81 32       	cpi	r24, 0x21	; 33
 d56:	61 f0       	breq	.+24     	; 0xd70 <CDC_Device_ProcessControlRequest+0x42>
 d58:	20 f4       	brcc	.+8      	; 0xd62 <CDC_Device_ProcessControlRequest+0x34>
 d5a:	80 32       	cpi	r24, 0x20	; 32
 d5c:	09 f0       	breq	.+2      	; 0xd60 <CDC_Device_ProcessControlRequest+0x32>
 d5e:	94 c0       	rjmp	.+296    	; 0xe88 <CDC_Device_ProcessControlRequest+0x15a>
 d60:	3d c0       	rjmp	.+122    	; 0xddc <CDC_Device_ProcessControlRequest+0xae>
 d62:	82 32       	cpi	r24, 0x22	; 34
 d64:	09 f4       	brne	.+2      	; 0xd68 <CDC_Device_ProcessControlRequest+0x3a>
 d66:	6c c0       	rjmp	.+216    	; 0xe40 <CDC_Device_ProcessControlRequest+0x112>
 d68:	83 32       	cpi	r24, 0x23	; 35
 d6a:	09 f0       	breq	.+2      	; 0xd6e <CDC_Device_ProcessControlRequest+0x40>
 d6c:	8d c0       	rjmp	.+282    	; 0xe88 <CDC_Device_ProcessControlRequest+0x15a>
 d6e:	7c c0       	rjmp	.+248    	; 0xe68 <CDC_Device_ProcessControlRequest+0x13a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d70:	80 91 3b 02 	lds	r24, 0x023B
 d74:	81 3a       	cpi	r24, 0xA1	; 161
 d76:	09 f0       	breq	.+2      	; 0xd7a <CDC_Device_ProcessControlRequest+0x4c>
 d78:	87 c0       	rjmp	.+270    	; 0xe88 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d7a:	80 91 e8 00 	lds	r24, 0x00E8
 d7e:	87 7f       	andi	r24, 0xF7	; 247
 d80:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d84:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 d88:	80 ff       	sbrs	r24, 0
 d8a:	fc cf       	rjmp	.-8      	; 0xd84 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 d8c:	4c 89       	ldd	r20, Y+20	; 0x14
 d8e:	5d 89       	ldd	r21, Y+21	; 0x15
 d90:	6e 89       	ldd	r22, Y+22	; 0x16
 d92:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 d94:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
 d98:	bb 27       	eor	r27, r27
 d9a:	a7 2f       	mov	r26, r23
 d9c:	96 2f       	mov	r25, r22
 d9e:	85 2f       	mov	r24, r21
 da0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
 da4:	cb 01       	movw	r24, r22
 da6:	aa 27       	eor	r26, r26
 da8:	bb 27       	eor	r27, r27
 daa:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
 dae:	47 2f       	mov	r20, r23
 db0:	55 27       	eor	r21, r21
 db2:	66 27       	eor	r22, r22
 db4:	77 27       	eor	r23, r23
 db6:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 dba:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 dbc:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 dc0:	89 8d       	ldd	r24, Y+25	; 0x19
 dc2:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 dc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
 dc8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dcc:	80 91 e8 00 	lds	r24, 0x00E8
 dd0:	8e 77       	andi	r24, 0x7E	; 126
 dd2:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 dd6:	df 91       	pop	r29
 dd8:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 dda:	cb cb       	rjmp	.-2154   	; 0x572 <Endpoint_ClearStatusStage>
 ddc:	80 91 3b 02 	lds	r24, 0x023B
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 de0:	81 32       	cpi	r24, 0x21	; 33
 de2:	09 f0       	breq	.+2      	; 0xde6 <CDC_Device_ProcessControlRequest+0xb8>
 de4:	51 c0       	rjmp	.+162    	; 0xe88 <CDC_Device_ProcessControlRequest+0x15a>
 de6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dea:	87 7f       	andi	r24, 0xF7	; 247
 dec:	80 93 e8 00 	sts	0x00E8, r24
 df0:	04 c0       	rjmp	.+8      	; 0xdfa <CDC_Device_ProcessControlRequest+0xcc>
 df2:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 df4:	88 23       	and	r24, r24
 df6:	09 f4       	brne	.+2      	; 0xdfa <CDC_Device_ProcessControlRequest+0xcc>
 df8:	47 c0       	rjmp	.+142    	; 0xe88 <CDC_Device_ProcessControlRequest+0x15a>
 dfa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 dfe:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 e00:	f8 cf       	rjmp	.-16     	; 0xdf2 <CDC_Device_ProcessControlRequest+0xc4>
 e02:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 e06:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 e0a:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 e0e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
 e12:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 e14:	2d 8b       	std	Y+21, r18	; 0x15
 e16:	9e 8b       	std	Y+22, r25	; 0x16
 e18:	8f 8b       	std	Y+23, r24	; 0x17
 e1a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e1e:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 e20:	80 91 f1 00 	lds	r24, 0x00F1
 e24:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 e26:	80 91 f1 00 	lds	r24, 0x00F1
 e2a:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 e2c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e30:	8b 77       	andi	r24, 0x7B	; 123
 e32:	80 93 e8 00 	sts	0x00E8, r24
 e36:	9d db       	rcall	.-2246   	; 0x572 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 e38:	ce 01       	movw	r24, r28
 e3a:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 e3c:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e3e:	a6 ca       	rjmp	.-2740   	; 0x38c <EVENT_CDC_Device_LineEncodingChanged>
 e40:	80 91 3b 02 	lds	r24, 0x023B
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 e44:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e46:	01 f5       	brne	.+64     	; 0xe88 <CDC_Device_ProcessControlRequest+0x15a>
 e48:	80 91 e8 00 	lds	r24, 0x00E8
 e4c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e4e:	80 93 e8 00 	sts	0x00E8, r24
 e52:	8f db       	rcall	.-2274   	; 0x572 <Endpoint_ClearStatusStage>
 e54:	80 91 3d 02 	lds	r24, 0x023D
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e58:	90 91 3e 02 	lds	r25, 0x023E

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 e5c:	99 8b       	std	Y+17, r25	; 0x11
 e5e:	88 8b       	std	Y+16, r24	; 0x10
 e60:	ce 01       	movw	r24, r28
 e62:	df 91       	pop	r29
 e64:	cf 91       	pop	r28
 e66:	62 cf       	rjmp	.-316    	; 0xd2c <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 e68:	80 91 3b 02 	lds	r24, 0x023B
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e6c:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 e6e:	61 f4       	brne	.+24     	; 0xe88 <CDC_Device_ProcessControlRequest+0x15a>
 e70:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e74:	87 7f       	andi	r24, 0xF7	; 247
 e76:	80 93 e8 00 	sts	0x00E8, r24
 e7a:	7b db       	rcall	.-2314   	; 0x572 <Endpoint_ClearStatusStage>
 e7c:	60 91 3d 02 	lds	r22, 0x023D
 e80:	ce 01       	movw	r24, r28
 e82:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e84:	cf 91       	pop	r28
 e86:	52 cf       	rjmp	.-348    	; 0xd2c <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e88:	df 91       	pop	r29
 e8a:	cf 91       	pop	r28
 e8c:	08 95       	ret

00000e8e <__udivmodsi4>:
			}

			break;
	}
}
 e8e:	a1 e2       	ldi	r26, 0x21	; 33
 e90:	1a 2e       	mov	r1, r26
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e92:	aa 1b       	sub	r26, r26
 e94:	bb 1b       	sub	r27, r27
			}

			break;
	}
}
 e96:	fd 01       	movw	r30, r26
 e98:	0d c0       	rjmp	.+26     	; 0xeb4 <__udivmodsi4_ep>

00000e9a <__udivmodsi4_loop>:
 e9a:	aa 1f       	adc	r26, r26
 e9c:	bb 1f       	adc	r27, r27
 e9e:	ee 1f       	adc	r30, r30
 ea0:	ff 1f       	adc	r31, r31
 ea2:	a2 17       	cp	r26, r18
 ea4:	b3 07       	cpc	r27, r19
 ea6:	e4 07       	cpc	r30, r20
 ea8:	f5 07       	cpc	r31, r21
 eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__udivmodsi4_ep>
 eac:	a2 1b       	sub	r26, r18
 eae:	b3 0b       	sbc	r27, r19
 eb0:	e4 0b       	sbc	r30, r20
 eb2:	f5 0b       	sbc	r31, r21

00000eb4 <__udivmodsi4_ep>:
 eb4:	66 1f       	adc	r22, r22
 eb6:	77 1f       	adc	r23, r23
 eb8:	88 1f       	adc	r24, r24
 eba:	99 1f       	adc	r25, r25
 ebc:	1a 94       	dec	r1
 ebe:	69 f7       	brne	.-38     	; 0xe9a <__udivmodsi4_loop>
 ec0:	60 95       	com	r22
 ec2:	70 95       	com	r23
 ec4:	80 95       	com	r24
 ec6:	90 95       	com	r25
 ec8:	9b 01       	movw	r18, r22
 eca:	ac 01       	movw	r20, r24
 ecc:	bd 01       	movw	r22, r26
 ece:	cf 01       	movw	r24, r30
 ed0:	08 95       	ret

00000ed2 <_exit>:
 ed2:	f8 94       	cli

00000ed4 <__stop_program>:
 ed4:	ff cf       	rjmp	.-2      	; 0xed4 <__stop_program>
