
USB2AX_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000f80  00001014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000125  0080011e  0080011e  00001032  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000356  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001e22  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005f0  00000000  00000000  00001e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009b88  00000000  00000000  00002441  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002789  00000000  00000000  0000bfc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000fd17  00000000  00000000  0000e752  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f14  00000000  00000000  0001e46c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00018964  00000000  00000000  0001f380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006249  00000000  00000000  00037ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000748  00000000  00000000  0003df2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00009a83  00000000  00000000  0003e675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
   2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
   6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
   8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
   a:	00 00       	nop
   c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   e:	00 00       	nop
  10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
  12:	00 00       	nop
  14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
  16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
  18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
  22:	00 00       	nop
  24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
  26:	00 00       	nop
  28:	37 c3       	rjmp	.+1646   	; 0x698 <__vector_10>
}
  2a:	00 00       	nop
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
  2c:	f9 c3       	rjmp	.+2034   	; 0x820 <__vector_11>
  2e:	00 00       	nop
  30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
  32:	00 00       	nop
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
  34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
  36:	00 00       	nop
			{
				*CurrConfigLoc = PrevDescLoc;
  38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
  3a:	00 00       	nop
				*BytesRem      = PrevBytesRem;
  3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
  3e:	00 00       	nop
  40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
  42:	00 00       	nop
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
  44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
  46:	00 00       	nop
  48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
  4e:	00 00       	nop

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
  50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
}
  52:	00 00       	nop
  54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
  56:	00 00       	nop
  58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
  5e:	00 00       	nop
  60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
  62:	00 00       	nop
  64:	87 c1       	rjmp	.+782    	; 0x374 <__vector_25>
  66:	00 00       	nop

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;
  68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
  6e:	00 00       	nop
  70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
  72:	00 00       	nop
  74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
  76:	00 00       	nop
  78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
  80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
  82:	00 00       	nop
  84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
  86:	00 00       	nop
  88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
  8a:	00 00       	nop

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  8c:	6d c0       	rjmp	.+218    	; 0x168 <__bad_interrupt>
  8e:	00 00       	nop
  90:	6b c0       	rjmp	.+214    	; 0x168 <__bad_interrupt>
  92:	00 00       	nop
  94:	69 c0       	rjmp	.+210    	; 0x168 <__bad_interrupt>
  96:	00 00       	nop
  98:	67 c0       	rjmp	.+206    	; 0x168 <__bad_interrupt>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
  9a:	00 00       	nop
  9c:	65 c0       	rjmp	.+202    	; 0x168 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	63 c0       	rjmp	.+198    	; 0x168 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	61 c0       	rjmp	.+194    	; 0x168 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5f c0       	rjmp	.+190    	; 0x168 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  ac:	1c 03 55 00 53 00 42 00 32 00 41 00 58 00 20 00     ..U.S.B.2.A.X. .
  bc:	53 00 65 00 72 00 69 00 61 00 6c 00 00 00           S.e.r.i.a.l...

000000ca <ManufacturerString>:
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  ca:	12 03 58 00 65 00 76 00 65 00 6c 00 61 00 62 00     ..X.e.v.e.l.a.b.
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
  da:	73 00 00 00                                         s...

000000de <LanguageString>:
  de:	04 03 09 04                                         ....

000000e2 <ConfigurationDescriptor>:
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
  e2:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
  f2:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 102:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 112:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000120 <DeviceDescriptor>:
 120:	12 01 10 01 02 00 00 08 d0 16 a7 06 00 00 01 02     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 130:	dc 01                                               ..

00000132 <__ctors_end>:
 132:	11 24       	eor	r1, r1
 134:	1f be       	out	0x3f, r1	; 63
 136:	cf ef       	ldi	r28, 0xFF	; 255
 138:	da e0       	ldi	r29, 0x0A	; 10
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	cd bf       	out	0x3d, r28	; 61

0000013e <__do_copy_data>:
 13e:	11 e0       	ldi	r17, 0x01	; 1
 140:	a0 e0       	ldi	r26, 0x00	; 0
 142:	b1 e0       	ldi	r27, 0x01	; 1
 144:	e0 e8       	ldi	r30, 0x80	; 128
 146:	ff e0       	ldi	r31, 0x0F	; 15
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x10>
 14a:	05 90       	lpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	ae 31       	cpi	r26, 0x1E	; 30
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0xc>

00000154 <__do_clear_bss>:
				ReportSize     -= 2;
 154:	22 e0       	ldi	r18, 0x02	; 2
 156:	ae e1       	ldi	r26, 0x1E	; 30
				ReportData     += 2;
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
				break;
 15e:	a3 34       	cpi	r26, 0x43	; 67
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	99 d0       	rcall	.+306    	; 0x298 <main>
 166:	0a c7       	rjmp	.+3604   	; 0xf7c <_exit>

00000168 <__bad_interrupt>:
 168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <LEDs_SetAllLEDs>:
 16a:	9b b1       	in	r25, 0x0b	; 11
				ReportSize     -= 1;
 16c:	9f 79       	andi	r25, 0x9F	; 159
 16e:	98 2b       	or	r25, r24
				ReportData     += 1;
 170:	9b b9       	out	0x0b, r25	; 11
 172:	08 95       	ret

00000174 <RingBuffer_Insert>:
 174:	fc 01       	movw	r30, r24
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 176:	a0 81       	ld	r26, Z
 178:	b1 81       	ldd	r27, Z+1	; 0x01
 17a:	6c 93       	st	X, r22
 17c:	80 81       	ld	r24, Z
 17e:	91 81       	ldd	r25, Z+1	; 0x01
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	91 83       	std	Z+1, r25	; 0x01
 184:	80 83       	st	Z, r24
 186:	26 81       	ldd	r18, Z+6	; 0x06
 188:	37 81       	ldd	r19, Z+7	; 0x07
 18a:	82 17       	cp	r24, r18
 18c:	93 07       	cpc	r25, r19
 18e:	21 f4       	brne	.+8      	; 0x198 <RingBuffer_Insert+0x24>
 190:	84 81       	ldd	r24, Z+4	; 0x04
 192:	95 81       	ldd	r25, Z+5	; 0x05
 194:	91 83       	std	Z+1, r25	; 0x01
 196:	80 83       	st	Z, r24
 198:	2f b7       	in	r18, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	82 85       	ldd	r24, Z+10	; 0x0a
 19e:	93 85       	ldd	r25, Z+11	; 0x0b
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	93 87       	std	Z+11, r25	; 0x0b
 1a4:	82 87       	std	Z+10, r24	; 0x0a
 1a6:	2f bf       	out	0x3f, r18	; 63
 1a8:	08 95       	ret

000001aa <RingBuffer_Remove>:
 1aa:	fc 01       	movw	r30, r24
 1ac:	a2 81       	ldd	r26, Z+2	; 0x02
 1ae:	b3 81       	ldd	r27, Z+3	; 0x03
 1b0:	8d 91       	ld	r24, X+
 1b2:	b3 83       	std	Z+3, r27	; 0x03
 1b4:	a2 83       	std	Z+2, r26	; 0x02
 1b6:	26 81       	ldd	r18, Z+6	; 0x06
 1b8:	37 81       	ldd	r19, Z+7	; 0x07
 1ba:	a2 17       	cp	r26, r18
 1bc:	b3 07       	cpc	r27, r19
 1be:	21 f4       	brne	.+8      	; 0x1c8 <RingBuffer_Remove+0x1e>
 1c0:	24 81       	ldd	r18, Z+4	; 0x04
 1c2:	35 81       	ldd	r19, Z+5	; 0x05
 1c4:	33 83       	std	Z+3, r19	; 0x03
 1c6:	22 83       	std	Z+2, r18	; 0x02
 1c8:	9f b7       	in	r25, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	22 85       	ldd	r18, Z+10	; 0x0a
 1ce:	33 85       	ldd	r19, Z+11	; 0x0b
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	31 09       	sbc	r19, r1
 1d4:	33 87       	std	Z+11, r19	; 0x0b
 1d6:	22 87       	std	Z+10, r18	; 0x0a
 1d8:	9f bf       	out	0x3f, r25	; 63
 1da:	08 95       	ret

000001dc <cdc_send_byte>:
 1dc:	68 2f       	mov	r22, r24
 1de:	8b ea       	ldi	r24, 0xAB	; 171
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	c8 df       	rcall	.-112    	; 0x174 <RingBuffer_Insert>
 1e4:	a8 9a       	sbi	0x15, 0	; 21
 1e6:	08 95       	ret

000001e8 <cdc_send_USB_data>:
 1e8:	cf 93       	push	r28
 1ea:	fc 01       	movw	r30, r24
 1ec:	21 81       	ldd	r18, Z+1	; 0x01
 1ee:	2f 70       	andi	r18, 0x0F	; 15
 1f0:	20 93 e9 00 	sts	0x00E9, r18
 1f4:	20 91 e8 00 	lds	r18, 0x00E8
 1f8:	20 ff       	sbrs	r18, 0
 1fa:	2e c0       	rjmp	.+92     	; 0x258 <cdc_send_USB_data+0x70>
 1fc:	3f b7       	in	r19, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	20 91 b5 01 	lds	r18, 0x01B5
 204:	3f bf       	out	0x3f, r19	; 63
 206:	22 23       	and	r18, r18
 208:	e1 f0       	breq	.+56     	; 0x242 <cdc_send_USB_data+0x5a>
 20a:	c2 81       	ldd	r28, Z+2	; 0x02
 20c:	2c 17       	cp	r18, r28
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 20e:	10 f4       	brcc	.+4      	; 0x214 <cdc_send_USB_data+0x2c>
 210:	a8 9b       	sbis	0x15, 0	; 21
 212:	22 c0       	rjmp	.+68     	; 0x258 <cdc_send_USB_data+0x70>
 214:	a8 9a       	sbi	0x15, 0	; 21
 216:	2c 17       	cp	r18, r28
 218:	40 f4       	brcc	.+16     	; 0x22a <cdc_send_USB_data+0x42>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 21a:	c2 2f       	mov	r28, r18
 21c:	06 c0       	rjmp	.+12     	; 0x22a <cdc_send_USB_data+0x42>
 21e:	8b ea       	ldi	r24, 0xAB	; 171
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	c3 df       	rcall	.-122    	; 0x1aa <RingBuffer_Remove>
 224:	80 93 f1 00 	sts	0x00F1, r24
 228:	c1 50       	subi	r28, 0x01	; 1
 22a:	c1 11       	cpse	r28, r1
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 22c:	f8 cf       	rjmp	.-16     	; 0x21e <cdc_send_USB_data+0x36>
				break;
 22e:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 232:	85 fb       	bst	r24, 5
 234:	88 27       	eor	r24, r24
 236:	80 f9       	bld	r24, 0
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	89 27       	eor	r24, r25
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 23c:	80 93 1e 01 	sts	0x011E, r24
				break;
 240:	06 c0       	rjmp	.+12     	; 0x24e <cdc_send_USB_data+0x66>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 242:	80 91 1e 01 	lds	r24, 0x011E
 246:	88 23       	and	r24, r24
				break;
 248:	39 f0       	breq	.+14     	; 0x258 <cdc_send_USB_data+0x70>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 24a:	10 92 1e 01 	sts	0x011E, r1
 24e:	80 91 e8 00 	lds	r24, 0x00E8
 252:	8e 77       	andi	r24, 0x7E	; 126
 254:	80 93 e8 00 	sts	0x00E8, r24
				break;
 258:	cf 91       	pop	r28
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 25a:	08 95       	ret

0000025c <SetupHardware>:
 25c:	84 b7       	in	r24, 0x34	; 52
 25e:	87 7f       	andi	r24, 0xF7	; 247
 260:	84 bf       	out	0x34, r24	; 52
 262:	88 e1       	ldi	r24, 0x18	; 24
				break;
 264:	0f b6       	in	r0, 0x3f	; 63
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 266:	f8 94       	cli
 268:	80 93 60 00 	sts	0x0060, r24
 26c:	10 92 60 00 	sts	0x0060, r1
 270:	0f be       	out	0x3f, r0	; 63
 272:	90 e0       	ldi	r25, 0x00	; 0
				break;
 274:	80 e8       	ldi	r24, 0x80	; 128
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	80 93 61 00 	sts	0x0061, r24
 27e:	90 93 61 00 	sts	0x0061, r25
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 282:	0f be       	out	0x3f, r0	; 63
 284:	8a b1       	in	r24, 0x0a	; 10
 286:	80 66       	ori	r24, 0x60	; 96
				break;
 288:	8a b9       	out	0x0a, r24	; 10
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	8f 79       	andi	r24, 0x9F	; 159
 28e:	8b b9       	out	0x0b, r24	; 11
 290:	eb d1       	rcall	.+982    	; 0x668 <USB_Init>
 292:	84 e0       	ldi	r24, 0x04	; 4
				break;
 294:	85 bd       	out	0x25, r24	; 37
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 296:	08 95       	ret

00000298 <main>:
 298:	e1 df       	rcall	.-62     	; 0x25c <SetupHardware>
				break;
 29a:	ef e1       	ldi	r30, 0x1F	; 31
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	4f b7       	in	r20, 0x3f	; 63
				break;
 2a0:	f8 94       	cli
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2a2:	8b e2       	ldi	r24, 0x2B	; 43
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	91 83       	std	Z+1, r25	; 0x01
 2a8:	80 83       	st	Z, r24

				if (ParserData->UsingReportIDs)
 2aa:	93 83       	std	Z+3, r25	; 0x03
 2ac:	82 83       	std	Z+2, r24	; 0x02
 2ae:	95 83       	std	Z+5, r25	; 0x05
 2b0:	84 83       	std	Z+4, r24	; 0x04
 2b2:	8b ea       	ldi	r24, 0xAB	; 171
 2b4:	91 e0       	ldi	r25, 0x01	; 1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2b6:	97 83       	std	Z+7, r25	; 0x07
 2b8:	86 83       	std	Z+6, r24	; 0x06
 2ba:	20 e8       	ldi	r18, 0x80	; 128
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	31 87       	std	Z+9, r19	; 0x09
 2c0:	20 87       	std	Z+8, r18	; 0x08
 2c2:	13 86       	std	Z+11, r1	; 0x0b
 2c4:	12 86       	std	Z+10, r1	; 0x0a
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 2c6:	4f bf       	out	0x3f, r20	; 63

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
 2c8:	eb ea       	ldi	r30, 0xAB	; 171
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	4f b7       	in	r20, 0x3f	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 2ce:	f8 94       	cli
 2d0:	87 eb       	ldi	r24, 0xB7	; 183
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	91 83       	std	Z+1, r25	; 0x01
 2d6:	80 83       	st	Z, r24
 2d8:	93 83       	std	Z+3, r25	; 0x03
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 2da:	82 83       	std	Z+2, r24	; 0x02
 2dc:	95 83       	std	Z+5, r25	; 0x05
 2de:	84 83       	std	Z+4, r24	; 0x04
 2e0:	87 e3       	ldi	r24, 0x37	; 55
 2e2:	92 e0       	ldi	r25, 0x02	; 2
 2e4:	97 83       	std	Z+7, r25	; 0x07
 2e6:	86 83       	std	Z+6, r24	; 0x06
 2e8:	31 87       	std	Z+9, r19	; 0x09
 2ea:	20 87       	std	Z+8, r18	; 0x08
 2ec:	13 86       	std	Z+11, r1	; 0x0b
 2ee:	12 86       	std	Z+10, r1	; 0x0a
 2f0:	4f bf       	out	0x3f, r20	; 63

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	3a df       	rcall	.-396    	; 0x16a <LEDs_SetAllLEDs>
 2f6:	78 94       	sei
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 2f8:	8f b7       	in	r24, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	20 91 29 01 	lds	r18, 0x0129
 300:	30 91 2a 01 	lds	r19, 0x012A
 304:	8f bf       	out	0x3f, r24	; 63
 306:	80 91 27 01 	lds	r24, 0x0127
 30a:	90 91 28 01 	lds	r25, 0x0128
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 312:	49 f0       	breq	.+18     	; 0x326 <main+0x8e>
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	28 d5       	rcall	.+2640   	; 0xd6a <CDC_Device_ReceiveByte>
					}
				}

				ParserData->UsingReportIDs = true;
 31a:	97 fd       	sbrc	r25, 7
 31c:	04 c0       	rjmp	.+8      	; 0x326 <main+0x8e>
 31e:	68 2f       	mov	r22, r24
 320:	8f e1       	ldi	r24, 0x1F	; 31
 322:	91 e0       	ldi	r25, 0x01	; 1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 324:	27 df       	rcall	.-434    	; 0x174 <RingBuffer_Insert>
 326:	2f b7       	in	r18, 0x3f	; 63
 328:	f8 94       	cli
 32a:	80 91 29 01 	lds	r24, 0x0129
				break;
 32e:	90 91 2a 01 	lds	r25, 0x012A
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 332:	2f bf       	out	0x3f, r18	; 63
 334:	89 2b       	or	r24, r25
 336:	49 f0       	breq	.+18     	; 0x34a <main+0xb2>
 338:	8f e1       	ldi	r24, 0x1F	; 31
 33a:	91 e0       	ldi	r25, 0x01	; 1
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 33c:	36 df       	rcall	.-404    	; 0x1aa <RingBuffer_Remove>
 33e:	90 91 c8 00 	lds	r25, 0x00C8
 342:	95 ff       	sbrs	r25, 5
 344:	fc cf       	rjmp	.-8      	; 0x33e <main+0xa6>
 346:	80 93 ce 00 	sts	0x00CE, r24
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	4c df       	rcall	.-360    	; 0x1e8 <cdc_send_USB_data>
 350:	cc d4       	rcall	.+2456   	; 0xcea <USB_USBTask>
 352:	d2 cf       	rjmp	.-92     	; 0x2f8 <main+0x60>

00000354 <EVENT_USB_Device_Connect>:
 354:	80 e4       	ldi	r24, 0x40	; 64
				break;
 356:	09 cf       	rjmp	.-494    	; 0x16a <LEDs_SetAllLEDs>

00000358 <EVENT_USB_Device_Disconnect>:
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	07 cf       	rjmp	.-498    	; 0x16a <LEDs_SetAllLEDs>

0000035c <EVENT_USB_Device_ConfigurationChanged>:
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	df d4       	rcall	.+2494   	; 0xd20 <CDC_Device_ConfigureEndpoints>
 362:	88 23       	and	r24, r24
 364:	11 f0       	breq	.+4      	; 0x36a <EVENT_USB_Device_ConfigurationChanged+0xe>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	01 c0       	rjmp	.+2      	; 0x36c <EVENT_USB_Device_ConfigurationChanged+0x10>
 36a:	80 e6       	ldi	r24, 0x60	; 96
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 36c:	fe ce       	rjmp	.-516    	; 0x16a <LEDs_SetAllLEDs>

0000036e <EVENT_USB_Device_ControlRequest>:
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	32 c5       	rjmp	.+2660   	; 0xdd8 <CDC_Device_ProcessControlRequest>

00000374 <__vector_25>:
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	2f 93       	push	r18
 380:	3f 93       	push	r19
 382:	4f 93       	push	r20

					while (CurrCollectionPath->Parent != NULL)
 384:	5f 93       	push	r21
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 386:	6f 93       	push	r22
 388:	7f 93       	push	r23
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
 396:	80 91 ce 00 	lds	r24, 0x00CE
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 39a:	9e b3       	in	r25, 0x1e	; 30
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
 39c:	94 30       	cpi	r25, 0x04	; 4
 39e:	09 f4       	brne	.+2      	; 0x3a2 <__vector_25+0x2e>
 3a0:	1d df       	rcall	.-454    	; 0x1dc <cdc_send_byte>
 3a2:	ff 91       	pop	r31
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
				}

				CurrCollectionPath->Type       = ReportItemData;
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0

				if (UsageListSize)
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <EVENT_CDC_Device_LineEncodingChanged>:
 3c4:	cf 93       	push	r28
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 3c6:	fc 01       	movw	r30, r24
 3c8:	a1 8d       	ldd	r26, Z+25	; 0x19
 3ca:	a1 50       	subi	r26, 0x01	; 1
 3cc:	a2 30       	cpi	r26, 0x02	; 2
 3ce:	28 f4       	brcc	.+10     	; 0x3da <EVENT_CDC_Device_LineEncodingChanged+0x16>
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	a5 5e       	subi	r26, 0xE5	; 229
 3d4:	be 4f       	sbci	r27, 0xFE	; 254
 3d6:	cc 91       	ld	r28, X

					for (uint8_t i = 0; i < UsageListSize; i++)
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <EVENT_CDC_Device_LineEncodingChanged+0x18>
					  UsageList[i] = UsageList[i + 1];
 3da:	c0 e0       	ldi	r28, 0x00	; 0
 3dc:	80 8d       	ldd	r24, Z+24	; 0x18
 3de:	82 30       	cpi	r24, 0x02	; 2
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <EVENT_CDC_Device_LineEncodingChanged+0x20>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
 3e2:	c8 60       	ori	r28, 0x08	; 8
 3e4:	82 8d       	ldd	r24, Z+26	; 0x1a
 3e6:	87 30       	cpi	r24, 0x07	; 7
 3e8:	31 f0       	breq	.+12     	; 0x3f6 <EVENT_CDC_Device_LineEncodingChanged+0x32>
 3ea:	88 30       	cpi	r24, 0x08	; 8
 3ec:	31 f0       	breq	.+12     	; 0x3fa <EVENT_CDC_Device_LineEncodingChanged+0x36>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
 3ee:	86 30       	cpi	r24, 0x06	; 6
 3f0:	29 f4       	brne	.+10     	; 0x3fc <EVENT_CDC_Device_LineEncodingChanged+0x38>
 3f2:	c2 60       	ori	r28, 0x02	; 2
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <EVENT_CDC_Device_LineEncodingChanged+0x38>
 3f6:	c4 60       	ori	r28, 0x04	; 4
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <EVENT_CDC_Device_LineEncodingChanged+0x38>
 3fa:	c6 60       	ori	r28, 0x06	; 6
 3fc:	10 92 c9 00 	sts	0x00C9, r1
 400:	10 92 c8 00 	sts	0x00C8, r1
 404:	10 92 ca 00 	sts	0x00CA, r1
 408:	24 89       	ldd	r18, Z+20	; 0x14
 40a:	35 89       	ldd	r19, Z+21	; 0x15
 40c:	46 89       	ldd	r20, Z+22	; 0x16
 40e:	57 89       	ldd	r21, Z+23	; 0x17
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 410:	ca 01       	movw	r24, r20
 412:	b9 01       	movw	r22, r18
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	77 95       	ror	r23
 41a:	67 95       	ror	r22
 41c:	60 58       	subi	r22, 0x80	; 128
 41e:	7b 47       	sbci	r23, 0x7B	; 123
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 420:	81 4e       	sbci	r24, 0xE1	; 225
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	89 d5       	rcall	.+2834   	; 0xf38 <__udivmodsi4>
 426:	21 50       	subi	r18, 0x01	; 1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 428:	31 09       	sbc	r19, r1
 42a:	30 93 cd 00 	sts	0x00CD, r19
				break;
 42e:	20 93 cc 00 	sts	0x00CC, r18
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 432:	c0 93 ca 00 	sts	0x00CA, r28
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	80 93 c8 00 	sts	0x00C8, r24
 43c:	88 e9       	ldi	r24, 0x98	; 152
 43e:	80 93 c9 00 	sts	0x00C9, r24
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <CALLBACK_USB_GetDescriptor>:
					NewReportItem.CollectionPath = CurrCollectionPath;
 446:	29 2f       	mov	r18, r25
 448:	33 27       	eor	r19, r19
 44a:	22 30       	cpi	r18, 0x02	; 2
 44c:	31 05       	cpc	r19, r1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 44e:	39 f0       	breq	.+14     	; 0x45e <CALLBACK_USB_GetDescriptor+0x18>
 450:	23 30       	cpi	r18, 0x03	; 3
 452:	31 05       	cpc	r19, r1
 454:	49 f0       	breq	.+18     	; 0x468 <CALLBACK_USB_GetDescriptor+0x22>

					if (UsageListSize)
 456:	21 30       	cpi	r18, 0x01	; 1
 458:	31 05       	cpc	r19, r1
 45a:	21 f1       	breq	.+72     	; 0x4a4 <CALLBACK_USB_GetDescriptor+0x5e>
 45c:	28 c0       	rjmp	.+80     	; 0x4ae <CALLBACK_USB_GetDescriptor+0x68>
 45e:	ee e3       	ldi	r30, 0x3E	; 62
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	82 ee       	ldi	r24, 0xE2	; 226
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	27 c0       	rjmp	.+78     	; 0x4b6 <CALLBACK_USB_GetDescriptor+0x70>
 468:	99 27       	eor	r25, r25
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	91 05       	cpc	r25, r1
 46e:	61 f0       	breq	.+24     	; 0x488 <CALLBACK_USB_GetDescriptor+0x42>
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	91 05       	cpc	r25, r1
 474:	81 f0       	breq	.+32     	; 0x496 <CALLBACK_USB_GetDescriptor+0x50>

						for (uint8_t i = 0; i < UsageListSize; i++)
 476:	89 2b       	or	r24, r25
						  UsageList[i] = UsageList[i + 1];
 478:	d1 f4       	brne	.+52     	; 0x4ae <CALLBACK_USB_GetDescriptor+0x68>
 47a:	ee ed       	ldi	r30, 0xDE	; 222
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	e4 91       	lpm	r30, Z

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	8e ed       	ldi	r24, 0xDE	; 222
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	17 c0       	rjmp	.+46     	; 0x4b6 <CALLBACK_USB_GetDescriptor+0x70>
 488:	ea ec       	ldi	r30, 0xCA	; 202
 48a:	f0 e0       	ldi	r31, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
 48c:	e4 91       	lpm	r30, Z
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	8a ec       	ldi	r24, 0xCA	; 202
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	10 c0       	rjmp	.+32     	; 0x4b6 <CALLBACK_USB_GetDescriptor+0x70>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 496:	ec ea       	ldi	r30, 0xAC	; 172
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	e4 91       	lpm	r30, Z
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	8c ea       	ldi	r24, 0xAC	; 172
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <CALLBACK_USB_GetDescriptor+0x70>
 4a4:	e2 e1       	ldi	r30, 0x12	; 18
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 e2       	ldi	r24, 0x20	; 32
 4aa:	91 e0       	ldi	r25, 0x01	; 1
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <CALLBACK_USB_GetDescriptor+0x70>
 4ae:	e0 e0       	ldi	r30, 0x00	; 0
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	da 01       	movw	r26, r20
 4b8:	8d 93       	st	X+, r24
 4ba:	9c 93       	st	X, r25
 4bc:	cf 01       	movw	r24, r30
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 4be:	08 95       	ret

000004c0 <Endpoint_ConfigureEndpoint_Prv>:
 4c0:	98 2f       	mov	r25, r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 4c2:	2c c0       	rjmp	.+88     	; 0x51c <Endpoint_ConfigureEndpoint_Prv+0x5c>
 4c4:	90 93 e9 00 	sts	0x00E9, r25
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 4c8:	98 17       	cp	r25, r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 4ca:	39 f0       	breq	.+14     	; 0x4da <Endpoint_ConfigureEndpoint_Prv+0x1a>
 4cc:	70 91 ec 00 	lds	r23, 0x00EC
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 4d0:	20 91 ed 00 	lds	r18, 0x00ED

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 4d4:	50 91 f0 00 	lds	r21, 0x00F0
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <Endpoint_ConfigureEndpoint_Prv+0x20>
 4da:	24 2f       	mov	r18, r20
 4dc:	76 2f       	mov	r23, r22
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	21 fd       	sbrc	r18, 1
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <Endpoint_ConfigureEndpoint_Prv+0x28>
 4e4:	9f 5f       	subi	r25, 0xFF	; 255
 4e6:	1a c0       	rjmp	.+52     	; 0x51c <Endpoint_ConfigureEndpoint_Prv+0x5c>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 4e8:	30 91 eb 00 	lds	r19, 0x00EB
 4ec:	3e 7f       	andi	r19, 0xFE	; 254
 4ee:	30 93 eb 00 	sts	0x00EB, r19
 4f2:	30 91 ed 00 	lds	r19, 0x00ED
 4f6:	3d 7f       	andi	r19, 0xFD	; 253

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 4f8:	30 93 ed 00 	sts	0x00ED, r19
 4fc:	30 91 eb 00 	lds	r19, 0x00EB
 500:	31 60       	ori	r19, 0x01	; 1
 502:	30 93 eb 00 	sts	0x00EB, r19
 506:	70 93 ec 00 	sts	0x00EC, r23
 50a:	20 93 ed 00 	sts	0x00ED, r18
 50e:	50 93 f0 00 	sts	0x00F0, r21
 512:	20 91 ee 00 	lds	r18, 0x00EE
 516:	27 fd       	sbrc	r18, 7
 518:	e5 cf       	rjmp	.-54     	; 0x4e4 <Endpoint_ConfigureEndpoint_Prv+0x24>
 51a:	07 c0       	rjmp	.+14     	; 0x52a <Endpoint_ConfigureEndpoint_Prv+0x6a>
 51c:	97 30       	cpi	r25, 0x07	; 7
 51e:	90 f2       	brcs	.-92     	; 0x4c4 <Endpoint_ConfigureEndpoint_Prv+0x4>
 520:	8f 70       	andi	r24, 0x0F	; 15
 522:	80 93 e9 00 	sts	0x00E9, r24
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	08 95       	ret

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	08 95       	ret

0000052e <Endpoint_ConfigureEndpointTable>:
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
					  return HID_PARSE_InsufficientReportItems;
 532:	cf 93       	push	r28
 534:	df 93       	push	r29

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 536:	06 2f       	mov	r16, r22
 538:	ec 01       	movw	r28, r24
 53a:	10 e0       	ldi	r17, 0x00	; 0
 53c:	2f c0       	rjmp	.+94     	; 0x59c <Endpoint_ConfigureEndpointTable+0x6e>
 53e:	98 81       	ld	r25, Y
 540:	91 11       	cpse	r25, r1
 542:	03 c0       	rjmp	.+6      	; 0x54a <Endpoint_ConfigureEndpointTable+0x1c>
 544:	1f 5f       	subi	r17, 0xFF	; 255
 546:	25 96       	adiw	r28, 0x05	; 5
 548:	29 c0       	rjmp	.+82     	; 0x59c <Endpoint_ConfigureEndpointTable+0x6e>
 54a:	2c 81       	ldd	r18, Y+4	; 0x04
 54c:	e9 81       	ldd	r30, Y+1	; 0x01
 54e:	fa 81       	ldd	r31, Y+2	; 0x02
 550:	7b 81       	ldd	r23, Y+3	; 0x03
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 552:	89 2f       	mov	r24, r25
 554:	8f 70       	andi	r24, 0x0F	; 15
 556:	87 30       	cpi	r24, 0x07	; 7
 558:	10 f0       	brcs	.+4      	; 0x55e <Endpoint_ConfigureEndpointTable+0x30>
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	22 c0       	rjmp	.+68     	; 0x5a2 <Endpoint_ConfigureEndpointTable+0x74>
 55e:	22 30       	cpi	r18, 0x02	; 2
 560:	10 f0       	brcs	.+4      	; 0x566 <Endpoint_ConfigureEndpointTable+0x38>
 562:	56 e0       	ldi	r21, 0x06	; 6
 564:	01 c0       	rjmp	.+2      	; 0x568 <Endpoint_ConfigureEndpointTable+0x3a>
 566:	52 e0       	ldi	r21, 0x02	; 2
 568:	28 e0       	ldi	r18, 0x08	; 8
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	40 e0       	ldi	r20, 0x00	; 0
 56e:	03 c0       	rjmp	.+6      	; 0x576 <Endpoint_ConfigureEndpointTable+0x48>
 570:	4f 5f       	subi	r20, 0xFF	; 255
 572:	22 0f       	add	r18, r18
 574:	33 1f       	adc	r19, r19
 576:	2e 17       	cp	r18, r30
 578:	3f 07       	cpc	r19, r31
 57a:	d0 f3       	brcs	.-12     	; 0x570 <Endpoint_ConfigureEndpointTable+0x42>
 57c:	42 95       	swap	r20
 57e:	40 7f       	andi	r20, 0xF0	; 240
 580:	45 2b       	or	r20, r21
 582:	69 2f       	mov	r22, r25
 584:	66 1f       	adc	r22, r22
 586:	66 27       	eor	r22, r22
 588:	66 1f       	adc	r22, r22
 58a:	90 e4       	ldi	r25, 0x40	; 64
 58c:	79 9f       	mul	r23, r25
 58e:	90 01       	movw	r18, r0
 590:	11 24       	eor	r1, r1
 592:	62 2b       	or	r22, r18
 594:	95 df       	rcall	.-214    	; 0x4c0 <Endpoint_ConfigureEndpoint_Prv>
 596:	81 11       	cpse	r24, r1
 598:	d5 cf       	rjmp	.-86     	; 0x544 <Endpoint_ConfigureEndpointTable+0x16>
 59a:	df cf       	rjmp	.-66     	; 0x55a <Endpoint_ConfigureEndpointTable+0x2c>
 59c:	10 13       	cpse	r17, r16
 59e:	cf cf       	rjmp	.-98     	; 0x53e <Endpoint_ConfigureEndpointTable+0x10>
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	08 95       	ret

000005ac <Endpoint_ClearStatusStage>:
 5ac:	80 91 3b 02 	lds	r24, 0x023B
 5b0:	87 fd       	sbrc	r24, 7
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <Endpoint_ClearStatusStage+0x12>
 5b4:	80 91 e8 00 	lds	r24, 0x00E8
 5b8:	80 ff       	sbrs	r24, 0
 5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <Endpoint_ClearStatusStage+0x2a>
 5bc:	10 c0       	rjmp	.+32     	; 0x5de <Endpoint_ClearStatusStage+0x32>
 5be:	80 91 e8 00 	lds	r24, 0x00E8
 5c2:	82 fd       	sbrc	r24, 2
 5c4:	04 c0       	rjmp	.+8      	; 0x5ce <Endpoint_ClearStatusStage+0x22>
 5c6:	8e b3       	in	r24, 0x1e	; 30
 5c8:	81 11       	cpse	r24, r1
 5ca:	f9 cf       	rjmp	.-14     	; 0x5be <Endpoint_ClearStatusStage+0x12>
 5cc:	08 95       	ret
 5ce:	80 91 e8 00 	lds	r24, 0x00E8
 5d2:	8b 77       	andi	r24, 0x7B	; 123
 5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <Endpoint_ClearStatusStage+0x38>
 5d6:	8e b3       	in	r24, 0x1e	; 30
 5d8:	81 11       	cpse	r24, r1
 5da:	ec cf       	rjmp	.-40     	; 0x5b4 <Endpoint_ClearStatusStage+0x8>
 5dc:	08 95       	ret
 5de:	80 91 e8 00 	lds	r24, 0x00E8
 5e2:	8e 77       	andi	r24, 0x7E	; 126
 5e4:	80 93 e8 00 	sts	0x00E8, r24
 5e8:	08 95       	ret

000005ea <USB_ResetInterface>:
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
					  ParserData->TotalReportItems++;
 5f0:	df 93       	push	r29
 5f2:	45 d0       	rcall	.+138    	; 0x67e <USB_INT_DisableAllInterrupts>
 5f4:	4c d0       	rcall	.+152    	; 0x68e <USB_INT_ClearAllInterrupts>
 5f6:	c8 ed       	ldi	r28, 0xD8	; 216
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
 5fa:	88 81       	ld	r24, Y
 5fc:	8f 77       	andi	r24, 0x7F	; 127
 5fe:	88 83       	st	Y, r24
 600:	88 81       	ld	r24, Y
 602:	80 68       	ori	r24, 0x80	; 128
 604:	88 83       	st	Y, r24
 606:	88 81       	ld	r24, Y
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 608:	8f 7d       	andi	r24, 0xDF	; 223
 60a:	88 83       	st	Y, r24
 60c:	19 bc       	out	0x29, r1	; 41
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 60e:	1e ba       	out	0x1e, r1	; 30
 610:	10 92 37 02 	sts	0x0237, r1
 614:	10 92 39 02 	sts	0x0239, r1
 618:	10 92 38 02 	sts	0x0238, r1
 61c:	00 ee       	ldi	r16, 0xE0	; 224
 61e:	10 e0       	ldi	r17, 0x00	; 0
 620:	f8 01       	movw	r30, r16
 622:	80 81       	ld	r24, Z
 624:	8b 7f       	andi	r24, 0xFB	; 251
 626:	80 83       	st	Z, r24
 628:	88 81       	ld	r24, Y
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 62a:	81 60       	ori	r24, 0x01	; 1
 62c:	88 83       	st	Y, r24
 62e:	42 e0       	ldi	r20, 0x02	; 2
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	45 df       	rcall	.-374    	; 0x4c0 <Endpoint_ConfigureEndpoint_Prv>
 636:	e1 ee       	ldi	r30, 0xE1	; 225
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	8e 7f       	andi	r24, 0xFE	; 254
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 63e:	80 83       	st	Z, r24
 640:	e2 ee       	ldi	r30, 0xE2	; 226
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	81 60       	ori	r24, 0x01	; 1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 648:	80 83       	st	Z, r24
 64a:	80 81       	ld	r24, Z
 64c:	88 60       	ori	r24, 0x08	; 8
 64e:	80 83       	st	Z, r24
 650:	f8 01       	movw	r30, r16
 652:	80 81       	ld	r24, Z
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 654:	8e 7f       	andi	r24, 0xFE	; 254
 656:	80 83       	st	Z, r24
 658:	88 81       	ld	r24, Y
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 65a:	80 61       	ori	r24, 0x10	; 16
 65c:	88 83       	st	Y, r24
 65e:	df 91       	pop	r29
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	08 95       	ret

00000668 <USB_Init>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
 668:	e7 ed       	ldi	r30, 0xD7	; 215
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	81 60       	ori	r24, 0x01	; 1
	  return HID_PARSE_NoUnfilteredReportItems;
 670:	80 83       	st	Z, r24
 672:	84 e0       	ldi	r24, 0x04	; 4

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 674:	82 bf       	out	0x32, r24	; 50
 676:	81 e0       	ldi	r24, 0x01	; 1

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 678:	80 93 3a 02 	sts	0x023A, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 67c:	b6 cf       	rjmp	.-148    	; 0x5ea <USB_ResetInterface>

0000067e <USB_INT_DisableAllInterrupts>:
 67e:	e8 ed       	ldi	r30, 0xD8	; 216
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 684:	8e 7f       	andi	r24, 0xFE	; 254
 686:	80 83       	st	Z, r24
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 688:	10 92 e2 00 	sts	0x00E2, r1
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 68c:	08 95       	ret

0000068e <USB_INT_ClearAllInterrupts>:
 68e:	10 92 da 00 	sts	0x00DA, r1
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 692:	10 92 e1 00 	sts	0x00E1, r1
 696:	08 95       	ret

00000698 <__vector_10>:

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	2f 93       	push	r18
 6a4:	3f 93       	push	r19
 6a6:	4f 93       	push	r20
 6a8:	5f 93       	push	r21
 6aa:	6f 93       	push	r22
 6ac:	7f 93       	push	r23
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
 6b6:	ef 93       	push	r30
 6b8:	ff 93       	push	r31
 6ba:	80 91 e1 00 	lds	r24, 0x00E1
 6be:	82 ff       	sbrs	r24, 2
 6c0:	0a c0       	rjmp	.+20     	; 0x6d6 <__vector_10+0x3e>
 6c2:	80 91 e2 00 	lds	r24, 0x00E2
 6c6:	82 ff       	sbrs	r24, 2
 6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <__vector_10+0x3e>
 6ca:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 6ce:	8b 7f       	andi	r24, 0xFB	; 251
 6d0:	80 93 e1 00 	sts	0x00E1, r24
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 6d4:	09 d3       	rcall	.+1554   	; 0xce8 <USB_Event_Stub>
 6d6:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 6da:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 6dc:	1b c0       	rjmp	.+54     	; 0x714 <__vector_10+0x7c>
 6de:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 6e2:	80 ff       	sbrs	r24, 0
 6e4:	17 c0       	rjmp	.+46     	; 0x714 <__vector_10+0x7c>
 6e6:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 6ea:	8e 7f       	andi	r24, 0xFE	; 254
 6ec:	80 93 da 00 	sts	0x00DA, r24
 6f0:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 6f4:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 6f6:	0b c0       	rjmp	.+22     	; 0x70e <__vector_10+0x76>
 6f8:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6fa:	89 bd       	out	0x29, r24	; 41
 6fc:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6fe:	89 bd       	out	0x29, r24	; 41
 700:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 702:	00 fe       	sbrs	r0, 0
 704:	fd cf       	rjmp	.-6      	; 0x700 <__vector_10+0x68>
 706:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 708:	8e bb       	out	0x1e, r24	; 30
 70a:	24 de       	rcall	.-952    	; 0x354 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 70c:	03 c0       	rjmp	.+6      	; 0x714 <__vector_10+0x7c>
 70e:	19 bc       	out	0x29, r1	; 41
 710:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 712:	22 de       	rcall	.-956    	; 0x358 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 714:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 718:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 71a:	17 c0       	rjmp	.+46     	; 0x74a <__vector_10+0xb2>
 71c:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 720:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 722:	13 c0       	rjmp	.+38     	; 0x74a <__vector_10+0xb2>
 724:	80 91 e2 00 	lds	r24, 0x00E2
 728:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 72a:	80 93 e2 00 	sts	0x00E2, r24
 72e:	80 91 e2 00 	lds	r24, 0x00E2
 732:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 734:	80 93 e2 00 	sts	0x00E2, r24
 738:	80 91 d8 00 	lds	r24, 0x00D8
 73c:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 73e:	80 93 d8 00 	sts	0x00D8, r24
 742:	19 bc       	out	0x29, r1	; 41
 744:	85 e0       	ldi	r24, 0x05	; 5
 746:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 748:	cf d2       	rcall	.+1438   	; 0xce8 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 74a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 74e:	84 ff       	sbrs	r24, 4
 750:	2c c0       	rjmp	.+88     	; 0x7aa <__vector_10+0x112>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 752:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 756:	84 ff       	sbrs	r24, 4
 758:	28 c0       	rjmp	.+80     	; 0x7aa <__vector_10+0x112>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 75a:	80 e1       	ldi	r24, 0x10	; 16
 75c:	89 bd       	out	0x29, r24	; 41
 75e:	82 e1       	ldi	r24, 0x12	; 18
 760:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 762:	09 b4       	in	r0, 0x29	; 41
 764:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 766:	fd cf       	rjmp	.-6      	; 0x762 <__vector_10+0xca>
 768:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 76c:	8f 7d       	andi	r24, 0xDF	; 223
 76e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 772:	80 91 e1 00 	lds	r24, 0x00E1
 776:	8f 7e       	andi	r24, 0xEF	; 239
 778:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 77c:	80 91 e2 00 	lds	r24, 0x00E2
 780:	8f 7e       	andi	r24, 0xEF	; 239
 782:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 786:	80 91 e2 00 	lds	r24, 0x00E2
 78a:	81 60       	ori	r24, 0x01	; 1
 78c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 790:	80 91 37 02 	lds	r24, 0x0237
 794:	81 11       	cpse	r24, r1
 796:	04 c0       	rjmp	.+8      	; 0x7a0 <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 798:	80 91 e3 00 	lds	r24, 0x00E3
 79c:	87 ff       	sbrs	r24, 7
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 7a0:	84 e0       	ldi	r24, 0x04	; 4
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	8e bb       	out	0x1e, r24	; 30
 7a8:	9f d2       	rcall	.+1342   	; 0xce8 <USB_Event_Stub>
 7aa:	80 91 e1 00 	lds	r24, 0x00E1
 7ae:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 7b0:	26 c0       	rjmp	.+76     	; 0x7fe <__vector_10+0x166>
 7b2:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 7b6:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7b8:	22 c0       	rjmp	.+68     	; 0x7fe <__vector_10+0x166>
 7ba:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 7be:	87 7f       	andi	r24, 0xF7	; 247
 7c0:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	8e bb       	out	0x1e, r24	; 30
 7c8:	10 92 37 02 	sts	0x0237, r1
 7cc:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7d0:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 7d2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7d6:	80 91 e2 00 	lds	r24, 0x00E2
 7da:	8e 7f       	andi	r24, 0xFE	; 254
 7dc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7e0:	80 91 e2 00 	lds	r24, 0x00E2
 7e4:	80 61       	ori	r24, 0x10	; 16
 7e6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7ea:	42 e0       	ldi	r20, 0x02	; 2
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	67 de       	rcall	.-818    	; 0x4c0 <Endpoint_ConfigureEndpoint_Prv>
 7f2:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
 7f6:	88 60       	ori	r24, 0x08	; 8
 7f8:	80 93 f0 00 	sts	0x00F0, r24
 7fc:	75 d2       	rcall	.+1258   	; 0xce8 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 7fe:	ff 91       	pop	r31
 800:	ef 91       	pop	r30
 802:	bf 91       	pop	r27
 804:	af 91       	pop	r26
 806:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 808:	8f 91       	pop	r24
 80a:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 80c:	6f 91       	pop	r22
 80e:	5f 91       	pop	r21
 810:	4f 91       	pop	r20
 812:	3f 91       	pop	r19
 814:	2f 91       	pop	r18
 816:	0f 90       	pop	r0
 818:	0f be       	out	0x3f, r0	; 63
 81a:	0f 90       	pop	r0
 81c:	1f 90       	pop	r1
 81e:	18 95       	reti

00000820 <__vector_11>:
 820:	1f 92       	push	r1
 822:	0f 92       	push	r0
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	0f 92       	push	r0
 828:	11 24       	eor	r1, r1
 82a:	2f 93       	push	r18
 82c:	3f 93       	push	r19

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 82e:	4f 93       	push	r20
 830:	5f 93       	push	r21
 832:	6f 93       	push	r22
 834:	7f 93       	push	r23
 836:	8f 93       	push	r24
 838:	9f 93       	push	r25
 83a:	af 93       	push	r26
 83c:	bf 93       	push	r27
 83e:	cf 93       	push	r28
 840:	ef 93       	push	r30
 842:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 844:	80 91 e9 00 	lds	r24, 0x00E9
 848:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 84a:	90 91 ec 00 	lds	r25, 0x00EC
 84e:	90 ff       	sbrs	r25, 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <__vector_11+0x36>
 852:	90 e8       	ldi	r25, 0x80	; 128
 854:	01 c0       	rjmp	.+2      	; 0x858 <__vector_11+0x38>
 856:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 858:	c9 2f       	mov	r28, r25
 85a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 85c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 860:	80 91 f0 00 	lds	r24, 0x00F0
 864:	87 7f       	andi	r24, 0xF7	; 247
 866:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 86a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 86c:	d7 d0       	rcall	.+430    	; 0xa1c <USB_Device_ProcessControlRequest>
 86e:	10 92 e9 00 	sts	0x00E9, r1
 872:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 876:	88 60       	ori	r24, 0x08	; 8
 878:	80 93 f0 00 	sts	0x00F0, r24
 87c:	cf 70       	andi	r28, 0x0F	; 15
 87e:	c0 93 e9 00 	sts	0x00E9, r28
 882:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 884:	ef 91       	pop	r30
 886:	cf 91       	pop	r28
 888:	bf 91       	pop	r27
 88a:	af 91       	pop	r26
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	7f 91       	pop	r23
 892:	6f 91       	pop	r22
 894:	5f 91       	pop	r21
 896:	4f 91       	pop	r20
 898:	3f 91       	pop	r19
 89a:	2f 91       	pop	r18
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8a6:	40 91 41 02 	lds	r20, 0x0241
 8aa:	50 91 42 02 	lds	r21, 0x0242
 8ae:	46 17       	cp	r20, r22
 8b0:	57 07       	cpc	r21, r23
 8b2:	48 f0       	brcs	.+18     	; 0x8c6 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8b4:	61 15       	cp	r22, r1
 8b6:	71 05       	cpc	r23, r1
 8b8:	39 f4       	brne	.+14     	; 0x8c8 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8ba:	40 91 e8 00 	lds	r20, 0x00E8
 8be:	4e 77       	andi	r20, 0x7E	; 126
 8c0:	40 93 e8 00 	sts	0x00E8, r20
 8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8c6:	ba 01       	movw	r22, r20
 8c8:	fc 01       	movw	r30, r24
 8ca:	40 e0       	ldi	r20, 0x00	; 0
 8cc:	32 c0       	rjmp	.+100    	; 0x932 <Endpoint_Write_Control_Stream_LE+0x8c>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8ce:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8d0:	88 23       	and	r24, r24
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <Endpoint_Write_Control_Stream_LE+0x30>
 8d4:	41 c0       	rjmp	.+130    	; 0x958 <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8d6:	85 30       	cpi	r24, 0x05	; 5
 8d8:	09 f4       	brne	.+2      	; 0x8dc <Endpoint_Write_Control_Stream_LE+0x36>
 8da:	40 c0       	rjmp	.+128    	; 0x95c <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8dc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 8e0:	83 fd       	sbrc	r24, 3
 8e2:	38 c0       	rjmp	.+112    	; 0x954 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8e4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 8e8:	82 fd       	sbrc	r24, 2
 8ea:	2e c0       	rjmp	.+92     	; 0x948 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8ec:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 8f0:	80 ff       	sbrs	r24, 0
 8f2:	1f c0       	rjmp	.+62     	; 0x932 <Endpoint_Write_Control_Stream_LE+0x8c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 8f4:	90 91 f3 00 	lds	r25, 0x00F3
 8f8:	80 91 f2 00 	lds	r24, 0x00F2
 8fc:	39 2f       	mov	r19, r25
 8fe:	20 e0       	ldi	r18, 0x00	; 0
 900:	a9 01       	movw	r20, r18
 902:	48 2b       	or	r20, r24
 904:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 906:	06 c0       	rjmp	.+12     	; 0x914 <Endpoint_Write_Control_Stream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 908:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 90a:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 90e:	61 50       	subi	r22, 0x01	; 1
 910:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 912:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 914:	61 15       	cp	r22, r1
 916:	71 05       	cpc	r23, r1
 918:	19 f0       	breq	.+6      	; 0x920 <Endpoint_Write_Control_Stream_LE+0x7a>
 91a:	88 30       	cpi	r24, 0x08	; 8
 91c:	91 05       	cpc	r25, r1
 91e:	a0 f3       	brcs	.-24     	; 0x908 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 920:	41 e0       	ldi	r20, 0x01	; 1
 922:	08 97       	sbiw	r24, 0x08	; 8
 924:	09 f0       	breq	.+2      	; 0x928 <Endpoint_Write_Control_Stream_LE+0x82>
 926:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 928:	80 91 e8 00 	lds	r24, 0x00E8
 92c:	8e 77       	andi	r24, 0x7E	; 126
 92e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 932:	61 15       	cp	r22, r1
 934:	71 05       	cpc	r23, r1
 936:	59 f6       	brne	.-106    	; 0x8ce <Endpoint_Write_Control_Stream_LE+0x28>
 938:	41 11       	cpse	r20, r1
 93a:	c9 cf       	rjmp	.-110    	; 0x8ce <Endpoint_Write_Control_Stream_LE+0x28>
 93c:	05 c0       	rjmp	.+10     	; 0x948 <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 93e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 940:	88 23       	and	r24, r24
 942:	51 f0       	breq	.+20     	; 0x958 <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 944:	85 30       	cpi	r24, 0x05	; 5
 946:	51 f0       	breq	.+20     	; 0x95c <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 948:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 94c:	82 ff       	sbrs	r24, 2
 94e:	f7 cf       	rjmp	.-18     	; 0x93e <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 958:	82 e0       	ldi	r24, 0x02	; 2
 95a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 95c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 95e:	08 95       	ret

00000960 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 960:	40 91 41 02 	lds	r20, 0x0241
 964:	50 91 42 02 	lds	r21, 0x0242
 968:	46 17       	cp	r20, r22
 96a:	57 07       	cpc	r21, r23
 96c:	48 f0       	brcs	.+18     	; 0x980 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 96e:	61 15       	cp	r22, r1
 970:	71 05       	cpc	r23, r1
 972:	39 f4       	brne	.+14     	; 0x982 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 974:	40 91 e8 00 	lds	r20, 0x00E8
 978:	4e 77       	andi	r20, 0x7E	; 126
 97a:	40 93 e8 00 	sts	0x00E8, r20
 97e:	01 c0       	rjmp	.+2      	; 0x982 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 980:	ba 01       	movw	r22, r20
 982:	fc 01       	movw	r30, r24
 984:	40 e0       	ldi	r20, 0x00	; 0
 986:	33 c0       	rjmp	.+102    	; 0x9ee <Endpoint_Write_Control_PStream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 988:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 98a:	88 23       	and	r24, r24
 98c:	09 f4       	brne	.+2      	; 0x990 <Endpoint_Write_Control_PStream_LE+0x30>
 98e:	42 c0       	rjmp	.+132    	; 0xa14 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 990:	85 30       	cpi	r24, 0x05	; 5
 992:	09 f4       	brne	.+2      	; 0x996 <Endpoint_Write_Control_PStream_LE+0x36>
 994:	41 c0       	rjmp	.+130    	; 0xa18 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 996:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 99a:	83 fd       	sbrc	r24, 3
 99c:	39 c0       	rjmp	.+114    	; 0xa10 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 99e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9a2:	82 fd       	sbrc	r24, 2
 9a4:	2f c0       	rjmp	.+94     	; 0xa04 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9a6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 9aa:	80 ff       	sbrs	r24, 0
 9ac:	20 c0       	rjmp	.+64     	; 0x9ee <Endpoint_Write_Control_PStream_LE+0x8e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 9ae:	90 91 f3 00 	lds	r25, 0x00F3
 9b2:	80 91 f2 00 	lds	r24, 0x00F2
 9b6:	39 2f       	mov	r19, r25
 9b8:	20 e0       	ldi	r18, 0x00	; 0
 9ba:	a9 01       	movw	r20, r18
 9bc:	48 2b       	or	r20, r24
 9be:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <Endpoint_Write_Control_PStream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 9c2:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9c4:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 9c8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 9ca:	61 50       	subi	r22, 0x01	; 1
 9cc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 9ce:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 9d0:	61 15       	cp	r22, r1
 9d2:	71 05       	cpc	r23, r1
 9d4:	19 f0       	breq	.+6      	; 0x9dc <Endpoint_Write_Control_PStream_LE+0x7c>
 9d6:	88 30       	cpi	r24, 0x08	; 8
 9d8:	91 05       	cpc	r25, r1
 9da:	98 f3       	brcs	.-26     	; 0x9c2 <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 9dc:	41 e0       	ldi	r20, 0x01	; 1
 9de:	08 97       	sbiw	r24, 0x08	; 8
 9e0:	09 f0       	breq	.+2      	; 0x9e4 <Endpoint_Write_Control_PStream_LE+0x84>
 9e2:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9e4:	80 91 e8 00 	lds	r24, 0x00E8
 9e8:	8e 77       	andi	r24, 0x7E	; 126
 9ea:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 9ee:	61 15       	cp	r22, r1
 9f0:	71 05       	cpc	r23, r1
 9f2:	51 f6       	brne	.-108    	; 0x988 <Endpoint_Write_Control_PStream_LE+0x28>
 9f4:	41 11       	cpse	r20, r1
 9f6:	c8 cf       	rjmp	.-112    	; 0x988 <Endpoint_Write_Control_PStream_LE+0x28>
 9f8:	05 c0       	rjmp	.+10     	; 0xa04 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9fa:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9fc:	88 23       	and	r24, r24
 9fe:	51 f0       	breq	.+20     	; 0xa14 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a00:	85 30       	cpi	r24, 0x05	; 5
 a02:	51 f0       	breq	.+20     	; 0xa18 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a04:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a08:	82 ff       	sbrs	r24, 2
 a0a:	f7 cf       	rjmp	.-18     	; 0x9fa <Endpoint_Write_Control_PStream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 a14:	82 e0       	ldi	r24, 0x02	; 2
 a16:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 a18:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a1a:	08 95       	ret

00000a1c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a1c:	ef 92       	push	r14
 a1e:	ff 92       	push	r15
 a20:	0f 93       	push	r16
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	ac 97       	sbiw	r28, 0x2c	; 44
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 a38:	eb e3       	ldi	r30, 0x3B	; 59
 a3a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a3c:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a40:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a42:	22 e0       	ldi	r18, 0x02	; 2
 a44:	e3 34       	cpi	r30, 0x43	; 67
 a46:	f2 07       	cpc	r31, r18
 a48:	c9 f7       	brne	.-14     	; 0xa3c <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a4a:	91 dc       	rcall	.-1758   	; 0x36e <EVENT_USB_Device_ControlRequest>
 a4c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a50:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a52:	2f c1       	rjmp	.+606    	; 0xcb2 <__stack+0x1b3>
 a54:	80 91 3b 02 	lds	r24, 0x023B
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a58:	90 91 3c 02 	lds	r25, 0x023C

		switch (USB_ControlRequest.bRequest)
 a5c:	95 30       	cpi	r25, 0x05	; 5
 a5e:	09 f4       	brne	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0x46>
 a60:	87 c0       	rjmp	.+270    	; 0xb70 <__stack+0x71>
 a62:	38 f4       	brcc	.+14     	; 0xa72 <USB_Device_ProcessControlRequest+0x56>
 a64:	91 30       	cpi	r25, 0x01	; 1
 a66:	b1 f1       	breq	.+108    	; 0xad4 <USB_Device_ProcessControlRequest+0xb8>
 a68:	70 f0       	brcs	.+28     	; 0xa86 <USB_Device_ProcessControlRequest+0x6a>
 a6a:	93 30       	cpi	r25, 0x03	; 3
 a6c:	09 f0       	breq	.+2      	; 0xa70 <USB_Device_ProcessControlRequest+0x54>
 a6e:	21 c1       	rjmp	.+578    	; 0xcb2 <__stack+0x1b3>
 a70:	31 c0       	rjmp	.+98     	; 0xad4 <USB_Device_ProcessControlRequest+0xb8>
 a72:	98 30       	cpi	r25, 0x08	; 8
 a74:	09 f4       	brne	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0x5c>
 a76:	f3 c0       	rjmp	.+486    	; 0xc5e <__stack+0x15f>
 a78:	99 30       	cpi	r25, 0x09	; 9
 a7a:	09 f4       	brne	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0x62>
 a7c:	ff c0       	rjmp	.+510    	; 0xc7c <__stack+0x17d>
 a7e:	96 30       	cpi	r25, 0x06	; 6
 a80:	09 f0       	breq	.+2      	; 0xa84 <USB_Device_ProcessControlRequest+0x68>
 a82:	17 c1       	rjmp	.+558    	; 0xcb2 <__stack+0x1b3>
 a84:	9b c0       	rjmp	.+310    	; 0xbbc <__stack+0xbd>
 a86:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a88:	21 f0       	breq	.+8      	; 0xa92 <USB_Device_ProcessControlRequest+0x76>
 a8a:	82 38       	cpi	r24, 0x82	; 130
 a8c:	09 f0       	breq	.+2      	; 0xa90 <USB_Device_ProcessControlRequest+0x74>
 a8e:	11 c1       	rjmp	.+546    	; 0xcb2 <__stack+0x1b3>
 a90:	08 c0       	rjmp	.+16     	; 0xaa2 <USB_Device_ProcessControlRequest+0x86>
 a92:	80 91 38 02 	lds	r24, 0x0238
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a96:	90 91 39 02 	lds	r25, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a9a:	99 23       	and	r25, r25
 a9c:	89 f0       	breq	.+34     	; 0xac0 <USB_Device_ProcessControlRequest+0xa4>
 a9e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 aa0:	0f c0       	rjmp	.+30     	; 0xac0 <USB_Device_ProcessControlRequest+0xa4>
 aa2:	80 91 3f 02 	lds	r24, 0x023F
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 aa6:	90 91 40 02 	lds	r25, 0x0240
 aaa:	8f 70       	andi	r24, 0x0F	; 15
 aac:	99 27       	eor	r25, r25
 aae:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ab2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 ab6:	85 fb       	bst	r24, 5
 ab8:	88 27       	eor	r24, r24
 aba:	80 f9       	bld	r24, 0
 abc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ac0:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ac4:	97 7f       	andi	r25, 0xF7	; 247
 ac6:	90 93 e8 00 	sts	0x00E8, r25
 aca:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 ace:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 ad2:	d0 c0       	rjmp	.+416    	; 0xc74 <__stack+0x175>
 ad4:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ad6:	19 f0       	breq	.+6      	; 0xade <USB_Device_ProcessControlRequest+0xc2>
 ad8:	82 30       	cpi	r24, 0x02	; 2
 ada:	09 f0       	breq	.+2      	; 0xade <USB_Device_ProcessControlRequest+0xc2>
 adc:	ea c0       	rjmp	.+468    	; 0xcb2 <__stack+0x1b3>
 ade:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 ae0:	21 f0       	breq	.+8      	; 0xaea <USB_Device_ProcessControlRequest+0xce>
 ae2:	82 30       	cpi	r24, 0x02	; 2
 ae4:	09 f0       	breq	.+2      	; 0xae8 <USB_Device_ProcessControlRequest+0xcc>
 ae6:	e5 c0       	rjmp	.+458    	; 0xcb2 <__stack+0x1b3>
 ae8:	0b c0       	rjmp	.+22     	; 0xb00 <__stack+0x1>
 aea:	80 91 3d 02 	lds	r24, 0x023D
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 aee:	81 30       	cpi	r24, 0x01	; 1
 af0:	09 f0       	breq	.+2      	; 0xaf4 <USB_Device_ProcessControlRequest+0xd8>
 af2:	df c0       	rjmp	.+446    	; 0xcb2 <__stack+0x1b3>
 af4:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 af6:	09 f0       	breq	.+2      	; 0xafa <USB_Device_ProcessControlRequest+0xde>
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	80 93 39 02 	sts	0x0239, r24
 afe:	2f c0       	rjmp	.+94     	; 0xb5e <__stack+0x5f>
 b00:	80 91 3d 02 	lds	r24, 0x023D

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b04:	81 11       	cpse	r24, r1
 b06:	2b c0       	rjmp	.+86     	; 0xb5e <__stack+0x5f>
 b08:	80 91 3f 02 	lds	r24, 0x023F
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b0c:	90 91 40 02 	lds	r25, 0x0240
 b10:	8f 70       	andi	r24, 0x0F	; 15
 b12:	99 27       	eor	r25, r25
 b14:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b16:	09 f4       	brne	.+2      	; 0xb1a <__stack+0x1b>
 b18:	cc c0       	rjmp	.+408    	; 0xcb2 <__stack+0x1b3>
 b1a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b1e:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b22:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b24:	1c c0       	rjmp	.+56     	; 0xb5e <__stack+0x5f>
 b26:	20 91 3c 02 	lds	r18, 0x023C
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b2a:	23 30       	cpi	r18, 0x03	; 3
 b2c:	21 f4       	brne	.+8      	; 0xb36 <__stack+0x37>
 b2e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b32:	80 62       	ori	r24, 0x20	; 32
 b34:	12 c0       	rjmp	.+36     	; 0xb5a <__stack+0x5b>
 b36:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b3a:	90 61       	ori	r25, 0x10	; 16
 b3c:	90 93 eb 00 	sts	0x00EB, r25
 b40:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	01 c0       	rjmp	.+2      	; 0xb48 <__stack+0x49>
 b46:	22 0f       	add	r18, r18
 b48:	8a 95       	dec	r24
 b4a:	ea f7       	brpl	.-6      	; 0xb46 <__stack+0x47>
 b4c:	20 93 ea 00 	sts	0x00EA, r18
 b50:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b54:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b58:	88 60       	ori	r24, 0x08	; 8
 b5a:	80 93 eb 00 	sts	0x00EB, r24
 b5e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b62:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b66:	87 7f       	andi	r24, 0xF7	; 247
 b68:	80 93 e8 00 	sts	0x00E8, r24
 b6c:	1f dd       	rcall	.-1474   	; 0x5ac <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b6e:	a1 c0       	rjmp	.+322    	; 0xcb2 <__stack+0x1b3>
 b70:	81 11       	cpse	r24, r1
 b72:	9f c0       	rjmp	.+318    	; 0xcb2 <__stack+0x1b3>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b74:	00 91 3d 02 	lds	r16, 0x023D
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 b78:	10 91 3e 02 	lds	r17, 0x023E
 b7c:	0f 77       	andi	r16, 0x7F	; 127
 b7e:	11 27       	eor	r17, r17
 b80:	e0 2e       	mov	r14, r16
 b82:	ff b6       	in	r15, 0x3f	; 63
 b84:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b86:	80 91 e8 00 	lds	r24, 0x00E8
 b8a:	87 7f       	andi	r24, 0xF7	; 247
 b8c:	80 93 e8 00 	sts	0x00E8, r24
 b90:	0d dd       	rcall	.-1510   	; 0x5ac <Endpoint_ClearStatusStage>
 b92:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b96:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b98:	fc cf       	rjmp	.-8      	; 0xb92 <__stack+0x93>
 b9a:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
 b9e:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ba0:	80 2b       	or	r24, r16
 ba2:	80 93 e3 00 	sts	0x00E3, r24
 ba6:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
 ba8:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 bac:	ee 20       	and	r14, r14
 bae:	11 f0       	breq	.+4      	; 0xbb4 <__stack+0xb5>
 bb0:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <__stack+0xb7>
 bb4:	82 e0       	ldi	r24, 0x02	; 2
 bb6:	8e bb       	out	0x1e, r24	; 30
 bb8:	ff be       	out	0x3f, r15	; 63
 bba:	7b c0       	rjmp	.+246    	; 0xcb2 <__stack+0x1b3>
 bbc:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 bbe:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
 bc0:	08 f0       	brcs	.+2      	; 0xbc4 <__stack+0xc5>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bc2:	77 c0       	rjmp	.+238    	; 0xcb2 <__stack+0x1b3>
 bc4:	80 91 3d 02 	lds	r24, 0x023D
 bc8:	90 91 3e 02 	lds	r25, 0x023E
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 bcc:	8c 3d       	cpi	r24, 0xDC	; 220
 bce:	23 e0       	ldi	r18, 0x03	; 3
 bd0:	92 07       	cpc	r25, r18
 bd2:	71 f5       	brne	.+92     	; 0xc30 <__stack+0x131>
 bd4:	83 e0       	ldi	r24, 0x03	; 3
 bd6:	8a 83       	std	Y+2, r24	; 0x02
 bd8:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bda:	89 83       	std	Y+1, r24	; 0x01
 bdc:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bde:	f8 94       	cli
 be0:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 be2:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 be4:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
 be6:	3e e0       	ldi	r19, 0x0E	; 14
 be8:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bea:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 bec:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bee:	50 93 57 00 	sts	0x0057, r21
 bf2:	e4 91       	lpm	r30, Z
 bf4:	20 ff       	sbrs	r18, 0
 bf6:	03 c0       	rjmp	.+6      	; 0xbfe <__stack+0xff>
 bf8:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
 bfa:	ef 70       	andi	r30, 0x0F	; 15
 bfc:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
 bfe:	ef 70       	andi	r30, 0x0F	; 15
 c00:	8e 2f       	mov	r24, r30
						SigReadAddress++;
 c02:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
 c04:	ea 30       	cpi	r30, 0x0A	; 10
 c06:	10 f0       	brcs	.+4      	; 0xc0c <__stack+0x10d>
 c08:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c0a:	01 c0       	rjmp	.+2      	; 0xc0e <__stack+0x10f>
 c0c:	c0 96       	adiw	r24, 0x30	; 48
 c0e:	8d 93       	st	X+, r24
 c10:	9d 93       	st	X+, r25
 c12:	2f 5f       	subi	r18, 0xFF	; 255
 c14:	24 31       	cpi	r18, 0x14	; 20
 c16:	49 f7       	brne	.-46     	; 0xbea <__stack+0xeb>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c18:	4f bf       	out	0x3f, r20	; 63
 c1a:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 c1e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c20:	80 93 e8 00 	sts	0x00E8, r24
 c24:	6a e2       	ldi	r22, 0x2A	; 42
 c26:	70 e0       	ldi	r23, 0x00	; 0
 c28:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c2a:	01 96       	adiw	r24, 0x01	; 1
 c2c:	3c de       	rcall	.-904    	; 0x8a6 <Endpoint_Write_Control_Stream_LE>
 c2e:	11 c0       	rjmp	.+34     	; 0xc52 <__stack+0x153>
 c30:	ae 01       	movw	r20, r28
 c32:	45 5d       	subi	r20, 0xD5	; 213
 c34:	5f 4f       	sbci	r21, 0xFF	; 255
 c36:	60 91 3f 02 	lds	r22, 0x023F
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c3a:	05 dc       	rcall	.-2038   	; 0x446 <CALLBACK_USB_GetDescriptor>
 c3c:	00 97       	sbiw	r24, 0x00	; 0
 c3e:	c9 f1       	breq	.+114    	; 0xcb2 <__stack+0x1b3>
 c40:	20 91 e8 00 	lds	r18, 0x00E8
 c44:	27 7f       	andi	r18, 0xF7	; 247
 c46:	20 93 e8 00 	sts	0x00E8, r18
 c4a:	bc 01       	movw	r22, r24
 c4c:	8b a5       	ldd	r24, Y+43	; 0x2b
 c4e:	9c a5       	ldd	r25, Y+44	; 0x2c
 c50:	87 de       	rcall	.-754    	; 0x960 <Endpoint_Write_Control_PStream_LE>
 c52:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c56:	8b 77       	andi	r24, 0x7B	; 123
 c58:	80 93 e8 00 	sts	0x00E8, r24
 c5c:	2a c0       	rjmp	.+84     	; 0xcb2 <__stack+0x1b3>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c5e:	80 38       	cpi	r24, 0x80	; 128
 c60:	41 f5       	brne	.+80     	; 0xcb2 <__stack+0x1b3>
 c62:	80 91 e8 00 	lds	r24, 0x00E8
 c66:	87 7f       	andi	r24, 0xF7	; 247
 c68:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c6c:	80 91 37 02 	lds	r24, 0x0237
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c70:	80 93 f1 00 	sts	0x00F1, r24
 c74:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c78:	8e 77       	andi	r24, 0x7E	; 126
 c7a:	76 cf       	rjmp	.-276    	; 0xb68 <__stack+0x69>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c7c:	81 11       	cpse	r24, r1
 c7e:	19 c0       	rjmp	.+50     	; 0xcb2 <__stack+0x1b3>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c80:	90 91 3d 02 	lds	r25, 0x023D
 c84:	92 30       	cpi	r25, 0x02	; 2
 c86:	a8 f4       	brcc	.+42     	; 0xcb2 <__stack+0x1b3>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c88:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c8c:	87 7f       	andi	r24, 0xF7	; 247
 c8e:	80 93 e8 00 	sts	0x00E8, r24
 c92:	90 93 37 02 	sts	0x0237, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c96:	8a dc       	rcall	.-1772   	; 0x5ac <Endpoint_ClearStatusStage>
 c98:	80 91 37 02 	lds	r24, 0x0237
 c9c:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c9e:	04 c0       	rjmp	.+8      	; 0xca8 <__stack+0x1a9>
 ca0:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 ca4:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <__stack+0x1ad>
 ca8:	84 e0       	ldi	r24, 0x04	; 4
 caa:	01 c0       	rjmp	.+2      	; 0xcae <__stack+0x1af>
 cac:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 cae:	8e bb       	out	0x1e, r24	; 30
 cb0:	55 db       	rcall	.-2390   	; 0x35c <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cb2:	80 91 e8 00 	lds	r24, 0x00E8
 cb6:	83 ff       	sbrs	r24, 3
 cb8:	0a c0       	rjmp	.+20     	; 0xcce <__stack+0x1cf>
 cba:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
 cbe:	80 62       	ori	r24, 0x20	; 32
 cc0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cc4:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 cc8:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cca:	80 93 e8 00 	sts	0x00E8, r24
 cce:	ac 96       	adiw	r28, 0x2c	; 44
 cd0:	0f b6       	in	r0, 0x3f	; 63
 cd2:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cd4:	de bf       	out	0x3e, r29	; 62
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	cd bf       	out	0x3d, r28	; 61
 cda:	df 91       	pop	r29
 cdc:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 cde:	1f 91       	pop	r17
 ce0:	0f 91       	pop	r16
 ce2:	ff 90       	pop	r15
 ce4:	ef 90       	pop	r14
 ce6:	08 95       	ret

00000ce8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
 ce8:	08 95       	ret

00000cea <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 cea:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 cec:	8e b3       	in	r24, 0x1e	; 30
 cee:	88 23       	and	r24, r24
 cf0:	a9 f0       	breq	.+42     	; 0xd1c <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cf2:	80 91 e9 00 	lds	r24, 0x00E9
 cf6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cf8:	90 91 ec 00 	lds	r25, 0x00EC
 cfc:	90 ff       	sbrs	r25, 0
 cfe:	02 c0       	rjmp	.+4      	; 0xd04 <USB_USBTask+0x1a>
 d00:	90 e8       	ldi	r25, 0x80	; 128
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <USB_USBTask+0x1c>
 d04:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d06:	c9 2f       	mov	r28, r25
 d08:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d0a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d0e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 d12:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 d14:	83 de       	rcall	.-762    	; 0xa1c <USB_Device_ProcessControlRequest>
 d16:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d18:	c0 93 e9 00 	sts	0x00E9, r28
 d1c:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
 d1e:	08 95       	ret

00000d20 <CDC_Device_ConfigureEndpoints>:
 d20:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d22:	df 93       	push	r29
 d24:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 d26:	40 96       	adiw	r24, 0x10	; 16
 d28:	fc 01       	movw	r30, r24
 d2a:	8b e0       	ldi	r24, 0x0B	; 11
 d2c:	df 01       	movw	r26, r30
 d2e:	1d 92       	st	X+, r1
 d30:	8a 95       	dec	r24
 d32:	e9 f7       	brne	.-6      	; 0xd2e <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 d34:	82 e0       	ldi	r24, 0x02	; 2
 d36:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 d38:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 d3a:	83 e0       	ldi	r24, 0x03	; 3
 d3c:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 d3e:	61 e0       	ldi	r22, 0x01	; 1
 d40:	ce 01       	movw	r24, r28
 d42:	01 96       	adiw	r24, 0x01	; 1
 d44:	f4 db       	rcall	.-2072   	; 0x52e <Endpoint_ConfigureEndpointTable>
 d46:	88 23       	and	r24, r24
 d48:	61 f0       	breq	.+24     	; 0xd62 <CDC_Device_ConfigureEndpoints+0x42>
 d4a:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d4c:	ce 01       	movw	r24, r28
 d4e:	06 96       	adiw	r24, 0x06	; 6
 d50:	ee db       	rcall	.-2084   	; 0x52e <Endpoint_ConfigureEndpointTable>
 d52:	88 23       	and	r24, r24
 d54:	31 f0       	breq	.+12     	; 0xd62 <CDC_Device_ConfigureEndpoints+0x42>
 d56:	61 e0       	ldi	r22, 0x01	; 1
 d58:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 d5a:	0b 96       	adiw	r24, 0x0b	; 11
 d5c:	df 91       	pop	r29
 d5e:	cf 91       	pop	r28
	  return false;

	return true;
}
 d60:	e6 cb       	rjmp	.-2100   	; 0x52e <Endpoint_ConfigureEndpointTable>
 d62:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 d64:	df 91       	pop	r29
 d66:	cf 91       	pop	r28
	  return false;

	return true;
}
 d68:	08 95       	ret

00000d6a <CDC_Device_ReceiveByte>:
 d6a:	2e b3       	in	r18, 0x1e	; 30
 d6c:	24 30       	cpi	r18, 0x04	; 4
 d6e:	19 f0       	breq	.+6      	; 0xd76 <CDC_Device_ReceiveByte+0xc>
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
 d70:	2f ef       	ldi	r18, 0xFF	; 255
 d72:	3f ef       	ldi	r19, 0xFF	; 255
 d74:	2e c0       	rjmp	.+92     	; 0xdd2 <CDC_Device_ReceiveByte+0x68>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d76:	fc 01       	movw	r30, r24
 d78:	44 89       	ldd	r20, Z+20	; 0x14
 d7a:	55 89       	ldd	r21, Z+21	; 0x15
 d7c:	66 89       	ldd	r22, Z+22	; 0x16
 d7e:	77 89       	ldd	r23, Z+23	; 0x17
 d80:	45 2b       	or	r20, r21
 d82:	46 2b       	or	r20, r22
 d84:	47 2b       	or	r20, r23
 d86:	a1 f3       	breq	.-24     	; 0xd70 <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d88:	86 81       	ldd	r24, Z+6	; 0x06
 d8a:	8f 70       	andi	r24, 0x0F	; 15
 d8c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d90:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 d94:	82 ff       	sbrs	r24, 2
 d96:	ec cf       	rjmp	.-40     	; 0xd70 <CDC_Device_ReceiveByte+0x6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 d98:	30 91 f3 00 	lds	r19, 0x00F3
 d9c:	20 91 f2 00 	lds	r18, 0x00F2
 da0:	93 2f       	mov	r25, r19
 da2:	80 e0       	ldi	r24, 0x00	; 0
 da4:	82 2b       	or	r24, r18
	{
		if (Endpoint_BytesInEndpoint())
 da6:	89 2b       	or	r24, r25
 da8:	21 f0       	breq	.+8      	; 0xdb2 <CDC_Device_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 daa:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 dae:	30 e0       	ldi	r19, 0x00	; 0
 db0:	02 c0       	rjmp	.+4      	; 0xdb6 <CDC_Device_ReceiveByte+0x4c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 db2:	2f ef       	ldi	r18, 0xFF	; 255
 db4:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 db6:	50 91 f3 00 	lds	r21, 0x00F3
 dba:	40 91 f2 00 	lds	r20, 0x00F2
 dbe:	95 2f       	mov	r25, r21
 dc0:	80 e0       	ldi	r24, 0x00	; 0
 dc2:	84 2b       	or	r24, r20
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 dc4:	89 2b       	or	r24, r25
 dc6:	29 f4       	brne	.+10     	; 0xdd2 <CDC_Device_ReceiveByte+0x68>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dc8:	80 91 e8 00 	lds	r24, 0x00E8
 dcc:	8b 77       	andi	r24, 0x7B	; 123
 dce:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 dd2:	c9 01       	movw	r24, r18
 dd4:	08 95       	ret

00000dd6 <CDC_Device_Event_Stub>:
}
#endif

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{
 dd6:	08 95       	ret

00000dd8 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 dd8:	cf 93       	push	r28
 dda:	df 93       	push	r29
 ddc:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dde:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 de2:	83 ff       	sbrs	r24, 3
 de4:	a6 c0       	rjmp	.+332    	; 0xf32 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 de6:	88 81       	ld	r24, Y
 de8:	90 e0       	ldi	r25, 0x00	; 0
 dea:	20 91 3f 02 	lds	r18, 0x023F
 dee:	30 91 40 02 	lds	r19, 0x0240
 df2:	28 17       	cp	r18, r24
 df4:	39 07       	cpc	r19, r25
 df6:	09 f0       	breq	.+2      	; 0xdfa <CDC_Device_ProcessControlRequest+0x22>
 df8:	9c c0       	rjmp	.+312    	; 0xf32 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
 dfa:	80 91 3c 02 	lds	r24, 0x023C
 dfe:	81 32       	cpi	r24, 0x21	; 33
 e00:	61 f0       	breq	.+24     	; 0xe1a <CDC_Device_ProcessControlRequest+0x42>
 e02:	20 f4       	brcc	.+8      	; 0xe0c <CDC_Device_ProcessControlRequest+0x34>
 e04:	80 32       	cpi	r24, 0x20	; 32
 e06:	09 f0       	breq	.+2      	; 0xe0a <CDC_Device_ProcessControlRequest+0x32>
 e08:	94 c0       	rjmp	.+296    	; 0xf32 <CDC_Device_ProcessControlRequest+0x15a>
 e0a:	3d c0       	rjmp	.+122    	; 0xe86 <CDC_Device_ProcessControlRequest+0xae>
 e0c:	82 32       	cpi	r24, 0x22	; 34
 e0e:	09 f4       	brne	.+2      	; 0xe12 <CDC_Device_ProcessControlRequest+0x3a>
 e10:	6c c0       	rjmp	.+216    	; 0xeea <CDC_Device_ProcessControlRequest+0x112>
 e12:	83 32       	cpi	r24, 0x23	; 35
 e14:	09 f0       	breq	.+2      	; 0xe18 <CDC_Device_ProcessControlRequest+0x40>
 e16:	8d c0       	rjmp	.+282    	; 0xf32 <CDC_Device_ProcessControlRequest+0x15a>
 e18:	7c c0       	rjmp	.+248    	; 0xf12 <CDC_Device_ProcessControlRequest+0x13a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 e1a:	80 91 3b 02 	lds	r24, 0x023B
 e1e:	81 3a       	cpi	r24, 0xA1	; 161
 e20:	09 f0       	breq	.+2      	; 0xe24 <CDC_Device_ProcessControlRequest+0x4c>
 e22:	87 c0       	rjmp	.+270    	; 0xf32 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e24:	80 91 e8 00 	lds	r24, 0x00E8
 e28:	87 7f       	andi	r24, 0xF7	; 247
 e2a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e2e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 e32:	80 ff       	sbrs	r24, 0
 e34:	fc cf       	rjmp	.-8      	; 0xe2e <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 e36:	4c 89       	ldd	r20, Y+20	; 0x14
 e38:	5d 89       	ldd	r21, Y+21	; 0x15
 e3a:	6e 89       	ldd	r22, Y+22	; 0x16
 e3c:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 e3e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
 e42:	bb 27       	eor	r27, r27
 e44:	a7 2f       	mov	r26, r23
 e46:	96 2f       	mov	r25, r22
 e48:	85 2f       	mov	r24, r21
 e4a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
 e4e:	cb 01       	movw	r24, r22
 e50:	aa 27       	eor	r26, r26
 e52:	bb 27       	eor	r27, r27
 e54:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
 e58:	47 2f       	mov	r20, r23
 e5a:	55 27       	eor	r21, r21
 e5c:	66 27       	eor	r22, r22
 e5e:	77 27       	eor	r23, r23
 e60:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 e64:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e66:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 e6a:	89 8d       	ldd	r24, Y+25	; 0x19
 e6c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 e70:	8a 8d       	ldd	r24, Y+26	; 0x1a
 e72:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e76:	80 91 e8 00 	lds	r24, 0x00E8
 e7a:	8e 77       	andi	r24, 0x7E	; 126
 e7c:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e80:	df 91       	pop	r29
 e82:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 e84:	93 cb       	rjmp	.-2266   	; 0x5ac <Endpoint_ClearStatusStage>
 e86:	80 91 3b 02 	lds	r24, 0x023B
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e8a:	81 32       	cpi	r24, 0x21	; 33
 e8c:	09 f0       	breq	.+2      	; 0xe90 <CDC_Device_ProcessControlRequest+0xb8>
 e8e:	51 c0       	rjmp	.+162    	; 0xf32 <CDC_Device_ProcessControlRequest+0x15a>
 e90:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e94:	87 7f       	andi	r24, 0xF7	; 247
 e96:	80 93 e8 00 	sts	0x00E8, r24
 e9a:	04 c0       	rjmp	.+8      	; 0xea4 <CDC_Device_ProcessControlRequest+0xcc>
 e9c:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 e9e:	88 23       	and	r24, r24
 ea0:	09 f4       	brne	.+2      	; 0xea4 <CDC_Device_ProcessControlRequest+0xcc>
 ea2:	47 c0       	rjmp	.+142    	; 0xf32 <CDC_Device_ProcessControlRequest+0x15a>
 ea4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 ea8:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 eaa:	f8 cf       	rjmp	.-16     	; 0xe9c <CDC_Device_ProcessControlRequest+0xc4>
 eac:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 eb0:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 eb4:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 eb8:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
 ebc:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 ebe:	2d 8b       	std	Y+21, r18	; 0x15
 ec0:	9e 8b       	std	Y+22, r25	; 0x16
 ec2:	8f 8b       	std	Y+23, r24	; 0x17
 ec4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 ec8:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 eca:	80 91 f1 00 	lds	r24, 0x00F1
 ece:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 ed0:	80 91 f1 00 	lds	r24, 0x00F1
 ed4:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 ed6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 eda:	8b 77       	andi	r24, 0x7B	; 123
 edc:	80 93 e8 00 	sts	0x00E8, r24
 ee0:	65 db       	rcall	.-2358   	; 0x5ac <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 ee2:	ce 01       	movw	r24, r28
 ee4:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 ee6:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 ee8:	6d ca       	rjmp	.-2854   	; 0x3c4 <EVENT_CDC_Device_LineEncodingChanged>
 eea:	80 91 3b 02 	lds	r24, 0x023B
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 eee:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ef0:	01 f5       	brne	.+64     	; 0xf32 <CDC_Device_ProcessControlRequest+0x15a>
 ef2:	80 91 e8 00 	lds	r24, 0x00E8
 ef6:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ef8:	80 93 e8 00 	sts	0x00E8, r24
 efc:	57 db       	rcall	.-2386   	; 0x5ac <Endpoint_ClearStatusStage>
 efe:	80 91 3d 02 	lds	r24, 0x023D
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f02:	90 91 3e 02 	lds	r25, 0x023E

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f06:	99 8b       	std	Y+17, r25	; 0x11
 f08:	88 8b       	std	Y+16, r24	; 0x10
 f0a:	ce 01       	movw	r24, r28
 f0c:	df 91       	pop	r29
 f0e:	cf 91       	pop	r28
 f10:	62 cf       	rjmp	.-316    	; 0xdd6 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f12:	80 91 3b 02 	lds	r24, 0x023B
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 f16:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f18:	61 f4       	brne	.+24     	; 0xf32 <CDC_Device_ProcessControlRequest+0x15a>
 f1a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f1e:	87 7f       	andi	r24, 0xF7	; 247
 f20:	80 93 e8 00 	sts	0x00E8, r24
 f24:	43 db       	rcall	.-2426   	; 0x5ac <Endpoint_ClearStatusStage>
 f26:	60 91 3d 02 	lds	r22, 0x023D
 f2a:	ce 01       	movw	r24, r28
 f2c:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f2e:	cf 91       	pop	r28
 f30:	52 cf       	rjmp	.-348    	; 0xdd6 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f32:	df 91       	pop	r29
 f34:	cf 91       	pop	r28
 f36:	08 95       	ret

00000f38 <__udivmodsi4>:
			}

			break;
	}
}
 f38:	a1 e2       	ldi	r26, 0x21	; 33
 f3a:	1a 2e       	mov	r1, r26
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f3c:	aa 1b       	sub	r26, r26
 f3e:	bb 1b       	sub	r27, r27
			}

			break;
	}
}
 f40:	fd 01       	movw	r30, r26
 f42:	0d c0       	rjmp	.+26     	; 0xf5e <__udivmodsi4_ep>

00000f44 <__udivmodsi4_loop>:
 f44:	aa 1f       	adc	r26, r26
 f46:	bb 1f       	adc	r27, r27
 f48:	ee 1f       	adc	r30, r30
 f4a:	ff 1f       	adc	r31, r31
 f4c:	a2 17       	cp	r26, r18
 f4e:	b3 07       	cpc	r27, r19
 f50:	e4 07       	cpc	r30, r20
 f52:	f5 07       	cpc	r31, r21
 f54:	20 f0       	brcs	.+8      	; 0xf5e <__udivmodsi4_ep>
 f56:	a2 1b       	sub	r26, r18
 f58:	b3 0b       	sbc	r27, r19
 f5a:	e4 0b       	sbc	r30, r20
 f5c:	f5 0b       	sbc	r31, r21

00000f5e <__udivmodsi4_ep>:
 f5e:	66 1f       	adc	r22, r22
 f60:	77 1f       	adc	r23, r23
 f62:	88 1f       	adc	r24, r24
 f64:	99 1f       	adc	r25, r25
 f66:	1a 94       	dec	r1
 f68:	69 f7       	brne	.-38     	; 0xf44 <__udivmodsi4_loop>
 f6a:	60 95       	com	r22
 f6c:	70 95       	com	r23
 f6e:	80 95       	com	r24
 f70:	90 95       	com	r25
 f72:	9b 01       	movw	r18, r22
 f74:	ac 01       	movw	r20, r24
 f76:	bd 01       	movw	r22, r26
 f78:	cf 01       	movw	r24, r30
 f7a:	08 95       	ret

00000f7c <_exit>:
 f7c:	f8 94       	cli

00000f7e <__stop_program>:
 f7e:	ff cf       	rjmp	.-2      	; 0xf7e <__stop_program>
